<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>插件</title>
      <link href="/wly/2022/11/07/cha-jian/"/>
      <url>/wly/2022/11/07/cha-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Addin"><a href="#Addin" class="headerlink" title="Addin"></a>Addin</h2><h3 id="SvgIcon-图标"><a href="#SvgIcon-图标" class="headerlink" title="SvgIcon 图标"></a>SvgIcon 图标</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 依赖下载</span>npm i svg<span class="token operator">-</span>sprite<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在components下面新建SvgIcon组件，并对index进行配置</span><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div    v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"isExternal"</span>    <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">"styleExternalIcon"</span>    <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"svg-external-icon svg-icon"</span>    v<span class="token operator">-</span>on<span class="token operator">=</span><span class="token string">"$listeners"</span>  <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span>svg    v<span class="token operator">-</span><span class="token keyword">else</span>    <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"svgClass"</span>    aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">"true"</span>    v<span class="token operator">-</span>on<span class="token operator">=</span><span class="token string">"$listeners"</span>  <span class="token operator">></span>    <span class="token operator">&lt;</span>use <span class="token operator">:</span>xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"iconName"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> isExternal <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'@/utils/validate'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'SvgIcon'</span><span class="token punctuation">,</span>  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">iconClass</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token literal-property property">required</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">className</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">type</span><span class="token operator">:</span> String<span class="token punctuation">,</span>      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token string">''</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token function">isExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token function">isExternal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>iconClass<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">iconName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>iconClass<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">svgClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>className<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'svg-icon '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>className      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">'svg-icon'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function">styleExternalIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">mask</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>iconClass<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) no-repeat 50% 50%</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token string-property property">'-webkit-mask'</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>iconClass<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">) no-repeat 50% 50%</span><span class="token template-punctuation string">`</span></span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style scoped<span class="token operator">></span><span class="token punctuation">.</span>svg<span class="token operator">-</span>icon <span class="token punctuation">&#123;</span>  <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>3em<span class="token punctuation">;</span>  <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">.</span>3em<span class="token punctuation">;</span>  vertical<span class="token operator">-</span>align<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">.</span>3em<span class="token punctuation">;</span>  <span class="token literal-property property">fill</span><span class="token operator">:</span> currentColor<span class="token punctuation">;</span>  <span class="token literal-property property">overflow</span><span class="token operator">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span>svg<span class="token operator">-</span>external<span class="token operator">-</span>icon <span class="token punctuation">&#123;</span>  background<span class="token operator">-</span>color<span class="token operator">:</span> currentColor<span class="token punctuation">;</span>  mask<span class="token operator">-</span>size<span class="token operator">:</span> cover <span class="token operator">!</span>important<span class="token punctuation">;</span>  <span class="token literal-property property">display</span><span class="token operator">:</span> inline<span class="token operator">-</span>block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在utils/validate.js配置</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">isExternal</span><span class="token punctuation">(</span><span class="token parameter">path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(https?:|mailto:|tel:)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建src/icons文件，创建svg文件夹和index.js</span><span class="token comment">// index.js代码如下:</span><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/components/SvgIcon'</span><span class="token keyword">const</span> svgRequired <span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">'./svg'</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span>svgRequired<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> <span class="token function">svgRequired</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token parameter">app</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  app<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'svg-icon'</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在main.js里导入</span><span class="token keyword">import</span> SvgIcon <span class="token keyword">from</span> <span class="token string">'@/icons'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>SvgIcon<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 使用格式&lt;svg-icon icon-class="文件名"/> 这里的文件名就是在src/icons/svg下的文件名</span><span class="token operator">&lt;</span>svg<span class="token operator">-</span>icon icon<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"user"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><img src="/wly/2022/11/07/cha-jian/svg.png" class="lazyload placeholder" data-srcset="/wly/2022/11/07/cha-jian/svg.png" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>权限管理</title>
      <link href="/wly/2022/11/03/quan-xian-guan-li/"/>
      <url>/wly/2022/11/03/quan-xian-guan-li/</url>
      
        <content type="html"><![CDATA[<h3 id="路由拦截"><a href="#路由拦截" class="headerlink" title="路由拦截"></a>路由拦截</h3><p>判断是否有 token 值，是则 next()登录首页，否则跳转到登录页<br>书写路径 src&#x2F;permission.js</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 权限 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 权限分配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node</title>
      <link href="/wly/2022/11/03/node.js/"/>
      <url>/wly/2022/11/03/node.js/</url>
      
        <content type="html"><![CDATA[<h3 id="node-写接口"><a href="#node-写接口" class="headerlink" title="node 写接口"></a>node 写接口</h3><h4 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h4><h5 id="NestUS-官网：https-nestjs-bootcss-com-first-steps"><a href="#NestUS-官网：https-nestjs-bootcss-com-first-steps" class="headerlink" title="NestUS 官网：https://nestjs.bootcss.com/first-steps"></a>NestUS 官网：<a href="https://nestjs.bootcss.com/first-steps">https://nestjs.bootcss.com/first-steps</a></h5><p>下载依赖</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm i <span class="token operator">-</span>g @nestjs<span class="token operator">/</span>cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建项目</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nest <span class="token keyword">new</span> <span class="token class-name">project</span><span class="token operator">-</span>name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>启动项目</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm run start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>项目地址：<a href="http://localhost:3000/">http://localhost:3000</a></p><h4 id="抒写接口"><a href="#抒写接口" class="headerlink" title="抒写接口"></a>抒写接口</h4><p>创建接口名 user</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">nest g resource user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建 get,post 请求</p><img src="/wly/2022/11/03/node.js/api.jpg" class="lazyload placeholder" data-srcset="/wly/2022/11/03/node.js/api.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class><p>返回参数</p><img src="/wly/2022/11/03/node.js/data.jpg" class="lazyload placeholder" data-srcset="/wly/2022/11/03/node.js/data.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class><p>快捷键</p><img src="/wly/2022/11/03/node.js/nest.jpg" class="lazyload placeholder" data-srcset="/wly/2022/11/03/node.js/nest.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>防抖和节流</title>
      <link href="/wly/2022/03/15/fang-dou-he-jie-liu/"/>
      <url>/wly/2022/03/15/fang-dou-he-jie-liu/</url>
      
        <content type="html"><![CDATA[<h3 id="防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内触发次数，两者都是为了减少触发频率，以便提高性能或者说避免资源浪费。"><a href="#防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内触发次数，两者都是为了减少触发频率，以便提高性能或者说避免资源浪费。" class="headerlink" title="防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内触发次数，两者都是为了减少触发频率，以便提高性能或者说避免资源浪费。"></a>防抖（Debounce）和节流（Throttle）都是用来控制某个函数在一定时间内触发次数，两者都是为了减少触发频率，以便提高性能或者说避免资源浪费。</h3><h4 id="防抖：指触发事件后在-n-秒内函数只能执行一次，如果在-n-秒内又触发了事件，则会重新计算函数执行时间。"><a href="#防抖：指触发事件后在-n-秒内函数只能执行一次，如果在-n-秒内又触发了事件，则会重新计算函数执行时间。" class="headerlink" title="防抖：指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。"></a>防抖：指触发事件后在 n 秒内函数只能执行一次，如果在 n 秒内又触发了事件，则会重新计算函数执行时间。</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input @keyup<span class="token operator">=</span><span class="token string">"sends(list)"</span>  <span class="token operator">/</span><span class="token operator">></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">timeout</span><span class="token operator">:</span><span class="token keyword">null</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//先判断定义的变量是不是没有被赋值定时器，</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//如果被赋值了就清除定时器</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">sends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//封装里面第一个值接收的是一个函数，所以这里就得传一个函数</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"防抖被调用了"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="节流：指连续触发事件但是在-n-秒中只执行一次函数。"><a href="#节流：指连续触发事件但是在-n-秒中只执行一次函数。" class="headerlink" title="节流：指连续触发事件但是在 n 秒中只执行一次函数。"></a>节流：指连续触发事件但是在 n 秒中只执行一次函数。</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>input @keyup<span class="token operator">=</span><span class="token string">"sends(list)"</span><span class="token operator">/</span><span class="token operator">></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">canUse</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//如果为true，就触发技能，否则就不能触发</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>canUse<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//触发技能后，关闭开关</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>canUse <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment">//在3秒后打开开关</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token keyword">this</span><span class="token punctuation">.</span>canUse <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token function">sends</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>el<span class="token operator">-</span>button<span class="token operator">:</span>loading<span class="token operator">=</span><span class="token string">"handLoading"</span>type<span class="token operator">=</span><span class="token string">"primary"</span>@click<span class="token operator">=</span><span class="token string">"handleConfirm"</span><span class="token operator">></span>确定<span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>button<span class="token operator">></span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">handLoading</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token function">handleConfirm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handLoading <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment">// 触发事件</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"节流"</span><span class="token punctuation">)</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>handLoading <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>项目总结</title>
      <link href="/wly/2022/03/15/xiang-mu-zong-jie/"/>
      <url>/wly/2022/03/15/xiang-mu-zong-jie/</url>
      
        <content type="html"><![CDATA[<h3 id="关于传参数格式"><a href="#关于传参数格式" class="headerlink" title="关于传参数格式"></a>关于传参数格式</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">FormData表单传值不能传递list<span class="token punctuation">,</span> 需转换Json格式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Elenent-ui-组件"><a href="#Elenent-ui-组件" class="headerlink" title="Elenent ui 组件"></a>Elenent ui 组件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 赋值回显</span>@change<span class="token operator">=</span><span class="token string">"$forceUpdate()"</span><span class="token comment">// 赋值回显校验未关闭</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>model绑定的对象<span class="token punctuation">,</span> <span class="token string">'要赋的值'</span><span class="token punctuation">,</span> 声明的值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="el-input-组件"><a href="#el-input-组件" class="headerlink" title="el-input 组件"></a>el-input 组件</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// el-input键盘事件</span><span class="token punctuation">.</span>native 方法<span class="token comment">// el-input赋值回显校验未关闭解决办法</span>@input<span class="token operator">=</span><span class="token string">"$forceUpdate()"</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>model绑定的对象<span class="token punctuation">,</span> <span class="token string">'要赋的值'</span><span class="token punctuation">,</span> 声明的值<span class="token punctuation">)</span><span class="token comment">// type="number" 去掉上下箭头的样式</span><span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep input<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>outer<span class="token operator">-</span>spin<span class="token operator">-</span>button<span class="token punctuation">,</span><span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep input<span class="token operator">:</span><span class="token operator">:</span><span class="token operator">-</span>webkit<span class="token operator">-</span>inner<span class="token operator">-</span>spin<span class="token operator">-</span>button <span class="token punctuation">&#123;</span>  <span class="token operator">-</span>webkit<span class="token operator">-</span>appearance<span class="token operator">:</span> none <span class="token operator">!</span>important<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">:</span><span class="token operator">:</span>v<span class="token operator">-</span>deep input<span class="token punctuation">[</span>type<span class="token operator">=</span><span class="token string">'number'</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>  <span class="token operator">-</span>moz<span class="token operator">-</span>appearance<span class="token operator">:</span> textfield <span class="token operator">!</span>important<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><h4 id="git-pull"><a href="#git-pull" class="headerlink" title="git pull"></a>git pull</h4><img src="/wly/2022/03/15/xiang-mu-zong-jie/Git_pull.jpg" class="lazyload placeholder" data-srcset="/wly/2022/03/15/xiang-mu-zong-jie/Git_pull.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 重新提交即可</span>git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">'first'</span>git pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSS-样式"><a href="#CSS-样式" class="headerlink" title="CSS 样式"></a>CSS 样式</h3><h4 id="去除-input-获取焦点边框"><a href="#去除-input-获取焦点边框" class="headerlink" title="去除 input 获取焦点边框"></a>去除 input 获取焦点边框</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">outline ；none<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="node-sassloader-版本过高所导致"><a href="#node-sassloader-版本过高所导致" class="headerlink" title="node-sassloader 版本过高所导致"></a>node-sassloader 版本过高所导致</h4><img src="/wly/2022/03/15/xiang-mu-zong-jie/Keep.jpg" class="lazyload placeholder" data-srcset="/wly/2022/03/15/xiang-mu-zong-jie/Keep.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class><h3 id="正则校验"><a href="#正则校验" class="headerlink" title="正则校验"></a>正则校验</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 限制只能输入英文</span>value <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^a-zA-Z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo命令</title>
      <link href="/wly/2022/03/13/hexo-ming-ling/"/>
      <url>/wly/2022/03/13/hexo-ming-ling/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo"><a href="#hexo" class="headerlink" title="hexo"></a>hexo</h2><h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">hexo new "此处输入文章名字"hexo new page "页面"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="编写文章"><a href="#编写文章" class="headerlink" title="编写文章"></a>编写文章</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">title: Hexo 命令 #本文标题date: 2022-01-13 17:37:37 #创建时间update：2022-01-13 18:00:00 #更新日期comments: true #是否可评论layout: post # 公开文章toc: true #是否显示文章目录swiper: true # 将改文章放入轮播图中swiperImg: '/medias/2.jpg' # 该文章在轮播图中的图片，可以是本地目录下图片也可以是 http://xxx 图片swiperDesc: 'Hexo 命令' #文字描述top: true #文章是否顶置onlyTitle: true #是否显示时间/字数统计/时长/阅读量信息categories: "hexo" #分类tags: 配置 #标签<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">// 也可以写成一条命令 hexo clean &amp;&amp; hexo g &amp;&amp; hexo shexo clean 清除缓存hexo g 生成静态文件hexo d 网站部署hexo s 启动服务器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="hexo-创建"><a href="#hexo-创建" class="headerlink" title="hexo 创建"></a>hexo 创建</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install hexo<span class="token operator">-</span>cli <span class="token operator">-</span>ghexo init blog （blog 项目名）cd blognpm installhexo server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Typora-快捷键"><a href="#Typora-快捷键" class="headerlink" title="Typora 快捷键"></a>Typora 快捷键</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">Ctrl+1：一级标题Ctrl+2：二级标题Ctrl+3：三级标题Ctrl+4：四级标题Ctrl+5：五级标题Ctrl+6 ：六级标题Ctrl+0：段落Ctrl+I：斜体Ctrl+B：粗体Ctrl+U：下划线Alt+Shift+5：删除线Ctrl+Shift+Q: 文字引用方法一：[链接文字](链接地址 '链接描述')例如：[示例链接](https://www.example.com/ '示例链接')方法二：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>链接地址</span><span class="token punctuation">></span></span>例如：&lt;https://www.example.com/>&#123;% asset_img 图片路径 图片描述 %&#125;post_asset_folder: true&#123;% asset_img example.jpg This is an example image %&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Front-matter-预定义参数"><a href="#Front-matter-预定义参数" class="headerlink" title="Front-matter 预定义参数"></a>Front-matter 预定义参数</h3><pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">配置选项 默认值 描述title Markdown 的文件标题 文章标题，强烈建议填写此选项date 文件创建时的日期时间 发布时间，强烈建议填写此选项，且最好保证全局唯一swiper false 表示该文章是否需要加入到首页轮播封面中swiperImg 无 表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片swiperDesc 无 表示该文章在首页轮播封面需要显示的文字描述（摘要），如果没有，则使用 excerpt，如果 excerpt 也没有，则取文章内容img 无 文章特征图，该文章显示的图片，没有则默认使用文章的特色图片excerpt 无 文章描述（摘要），该文章在首页的描述文字，如果没有，则取 swiperDesc,如果 swiperDesc 也没有，则取文章内容（优先取<span class="token comment">&lt;!-- more --></span>上面的内容）top false 将该值设为 true，则将该篇文章显示在首页的置顶栏目中toc true 将该值设为 false，则该篇文章不显示右侧目录tocOpen true 将该值设为 false，则该篇文章右侧目录默认收缩onlyTitle false 文章详情页头部是否只显示标题，不显示日期等信息comments true 将该值设为 false，则该篇文章不显示评论share true 将该值设为 false，则该篇文章不显示分享按钮copyright true 将该值设为 false，则该篇文章不显示版权声明donate true 将该值设为 false，则该篇文章不显示打赏按钮bgImg - 单独为这篇文章设置背景图片或者背景颜色，可以是数组，数组里面放图片链接，可以是字符串，字符串里面是颜色值，空值则背景颜色透明bgImgTransition fade 该篇文章的 bgImg 设置为数组,该值表示背景图片切换的动画,有三种值（fade, scale, translate-fade）bgImgDelay 180000(三分钟) 该篇文章的 bgImg 设置为数组,该值表示背景图片切换的延迟时间,categories 无 文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类prismjs 无 如果使用的是 hexo 自带的 prismjs 代码高亮，通过设置该值为该篇文章设置不同的代码高亮主题（default, coy, dark, funky, okaidia, solarizedlight, tomorrow, twilight）tags 无 文章标签，一篇文章可以多个标签mathjax false mathjax 公式imgTop true 设置为 false 则文章和自定义页面顶部不要图片<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://blog.csdn.net/wsmrzx/article/details/81478945">https://blog.csdn.net/wsmrzx/article/details/81478945</a><br><a href="https://yuang01.gitee.io/post/hexo-theme-bamboo/front-matter/">https://yuang01.gitee.io/post/hexo-theme-bamboo/front-matter/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工具</title>
      <link href="/wly/2022/02/07/git-gong-ju/"/>
      <url>/wly/2022/02/07/git-gong-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="Git下载"><a href="#Git下载" class="headerlink" title="Git下载"></a>Git下载</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">https</span><span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">git-scm.com</span><span class="token regex-delimiter">/</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git init    版本库初始化git add <span class="token punctuation">.</span>   添加至暂存区git commit <span class="token operator">-</span>m <span class="token string">'fist'</span> 从暂存区存到仓储区git checkout <span class="token operator">-</span>b dev  创建本地分支git checkout master  切到master分支git merge dev        合并分支git remote add origin 地址         配置地址git push <span class="token operator">-</span>u origin <span class="token string">"master"</span>        提交分支git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">""</span>   配置用户名git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">""</span>  配置邮箱git branch     查看本地所有分支git branch <span class="token operator">-</span>r  查看远程分支 git branch <span class="token operator">-</span>a  查看本地和远程分支 git status     查看当前状态 删除分支git branch <span class="token operator">-</span>d 本地分支名             删除本地分支git push origin <span class="token operator">--</span><span class="token keyword">delete</span> 远程分支名  删除远程分支版本回退git log                             显示日志git log <span class="token operator">--</span>pretty <span class="token operator">=</span> online           简化日志git reflog                          显示版本号git reset –hard <span class="token constant">HEAD</span> <span class="token operator">^</span>              <span class="token punctuation">(</span> <span class="token operator">^</span> 表示回到上一个版本，以此类推 <span class="token punctuation">)</span>git reset –hard 版本号               回退指定版本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git如何管理一个项目"><a href="#git如何管理一个项目" class="headerlink" title="git如何管理一个项目"></a>git如何管理一个项目</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git init 初始化git仓库（新项目才有这一步）git clone 将远程仓库的项目资料下载下来git checkout <span class="token operator">-</span>b <span class="token function">dev</span> <span class="token punctuation">(</span>dev 为本地分支名）git add <span class="token punctuation">.</span> 将工作区文件存在暂存区git commit <span class="token operator">-</span>m  <span class="token string">""</span> 从暂存区存到仓储区git checkout master切到master分支git merge dev 合并分支使用git push将其上传到远程仓库第二上班，先pull一下，更新最新代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git秘钥"><a href="#git秘钥" class="headerlink" title="git秘钥"></a>git秘钥</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">设置账号和邮箱git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>name <span class="token string">"账号名"</span>git config <span class="token operator">--</span>global user<span class="token punctuation">.</span>email <span class="token string">"邮箱"</span>生成秘钥ssh<span class="token operator">-</span>keygen <span class="token operator">-</span>t rsa <span class="token operator">-</span><span class="token constant">C</span> <span class="token string">"邮箱"</span> #不用设置密码，按三次回车即可查看秘钥，并复制到gitlab的ssh里cat <span class="token operator">/</span>root<span class="token operator">/</span><span class="token punctuation">.</span>ssh<span class="token operator">/</span>id_rsa<span class="token punctuation">.</span>pubwindows生成的秘钥在用户文件夹下，例如：<span class="token constant">C</span><span class="token operator">:</span>\Users\Administrator<span class="token punctuation">.</span>ssh在gitlab网页上添加钥匙：User Setting <span class="token operator">>></span> <span class="token constant">SSH</span> Keys <span class="token operator">>></span> Add key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Git命令"><a href="#Git命令" class="headerlink" title="Git命令"></a>Git命令</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">git branch 查看本地所有分支git status 查看当前状态 git commit 提交 git branch <span class="token operator">-</span>a 查看所有的分支git branch <span class="token operator">-</span>r 查看远程所有分支git commit <span class="token operator">-</span>am <span class="token string">"init"</span> 提交并且加注释 git remote add origin git@<span class="token number">192.168</span><span class="token number">.1</span><span class="token number">.119</span><span class="token operator">:</span>ndshowgit push origin master 将文件给推到服务器上 git remote show origin 显示远程库origin里的资源 git push origin master<span class="token operator">:</span>developgit push origin master<span class="token operator">:</span>hb<span class="token operator">-</span>dev 将本地库与服务器上的库进行关联 git checkout <span class="token operator">--</span>track origin<span class="token operator">/</span>dev 切换到远程dev分支git branch <span class="token operator">-</span><span class="token constant">D</span> master develop 删除本地库developgit checkout <span class="token operator">-</span>b dev 建立一个新的本地分支devgit merge origin<span class="token operator">/</span>dev 将分支dev与当前分支进行合并git checkout dev 切换到本地dev分支git remote show 查看远程库git add <span class="token punctuation">.</span>git rm <span class="token function">文件名</span><span class="token punctuation">(</span>包括路径<span class="token punctuation">)</span> 从git中删除指定文件git clone git<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>schacon<span class="token operator">/</span>grit<span class="token punctuation">.</span>git 从服务器上将代码给拉下来git config <span class="token operator">--</span>list 看所有用户git ls<span class="token operator">-</span>files 看已经被提交的git rm <span class="token punctuation">[</span>file name<span class="token punctuation">]</span> 删除一个文件git commit <span class="token operator">-</span>a 提交当前repos的所有的改变git add <span class="token punctuation">[</span>file name<span class="token punctuation">]</span> 添加一个文件到git indexgit commit <span class="token operator">-</span>v 当你用－v参数的时候可以看commit的差异git commit <span class="token operator">-</span>m <span class="token string">"This is the message describing the commit"</span> 添加commit信息git commit <span class="token operator">-</span>a <span class="token operator">-</span>a是代表add，把所有的change加到git index里然后再commitgit commit <span class="token operator">-</span>a <span class="token operator">-</span>v 一般提交命令git log 看你commit的日志git diff 查看尚未暂存的更新git rm a<span class="token punctuation">.</span>a <span class="token function">移除文件</span><span class="token punctuation">(</span>从暂存区和工作区中删除<span class="token punctuation">)</span>git rm <span class="token operator">--</span>cached a<span class="token punctuation">.</span>a <span class="token function">移除文件</span><span class="token punctuation">(</span>只从暂存区中删除<span class="token punctuation">)</span>git commit <span class="token operator">-</span>m <span class="token string">"remove"</span> <span class="token function">移除文件</span><span class="token punctuation">(</span>从Git中删除<span class="token punctuation">)</span>git rm <span class="token operator">-</span>f a<span class="token punctuation">.</span>a <span class="token function">强行移除修改后文件</span><span class="token punctuation">(</span>从暂存区和工作区中删除<span class="token punctuation">)</span>git diff <span class="token operator">--</span>cached 或 $ git diff <span class="token operator">--</span>staged 查看尚未提交的更新git stash push 将文件给push到一个临时空间中git stash pop 将文件从临时空间pop下来<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>git remote add origin git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>username<span class="token operator">/</span>Hello<span class="token operator">-</span>World<span class="token punctuation">.</span>gitgit push origin master 将本地项目给提交到服务器中<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>git pull 本地与服务器端同步<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>git <span class="token function">push</span> <span class="token punctuation">(</span>远程仓库名<span class="token punctuation">)</span> <span class="token punctuation">(</span>分支名<span class="token punctuation">)</span> 将本地分支推送到服务器上去。git push origin serverfix<span class="token operator">:</span>awesomebranch<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>git fetch 相当于是从远程获取最新版本到本地，不会自动mergegit commit <span class="token operator">-</span>a <span class="token operator">-</span>m <span class="token string">"log_message"</span> <span class="token punctuation">(</span><span class="token operator">-</span>a是提交所有改动，<span class="token operator">-</span>m是加入log信息<span class="token punctuation">)</span> 本地修改同步至服务器端 ：git branch branch_0<span class="token punctuation">.</span><span class="token number">1</span> master 从主分支master创建branch_0<span class="token punctuation">.</span><span class="token number">1</span>分支git branch <span class="token operator">-</span>m branch_0<span class="token punctuation">.</span><span class="token number">1</span> branch_1<span class="token punctuation">.</span><span class="token number">0</span> 将branch_0<span class="token punctuation">.</span><span class="token number">1</span>重命名为branch_1<span class="token punctuation">.</span><span class="token number">0</span>git checkout branch_1<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>master 切换到branch_1<span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">/</span>master分支du <span class="token operator">-</span>hsgit branch 删除远程branchgit push origin <span class="token operator">:</span>branch_remote_namegit branch <span class="token operator">-</span>r <span class="token operator">-</span>d branch_remote_name<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>初始化版本库，并提交到远程服务器端mkdir WebAppcd WebAppgit init 本地初始化touch <span class="token constant">README</span>git add <span class="token constant">README</span> 添加文件git commit <span class="token operator">-</span>m <span class="token string">'first commit'</span>git remote add origin git@github<span class="token punctuation">.</span>com<span class="token operator">:</span>daixu<span class="token operator">/</span>WebApp<span class="token punctuation">.</span>git增加一个远程服务器端上面的命令会增加<span class="token constant">URL</span>地址为<span class="token string">'git@github.com:daixu/WebApp.git'</span>，名称为origin的远程服务器库，以后提交代码的时候只需要使用 origin别名即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://blog.csdn.net/halaoda/article/details/78661334">https://blog.csdn.net/halaoda/article/details/78661334</a></p>]]></content>
      
      
      <categories>
          
          <category> 管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue搭建项目</title>
      <link href="/wly/2022/02/07/vue-da-jian-xiang-mu/"/>
      <url>/wly/2022/02/07/vue-da-jian-xiang-mu/</url>
      
        <content type="html"><![CDATA[<h2 id="搭建开发环境"><a href="#搭建开发环境" class="headerlink" title="搭建开发环境"></a>搭建开发环境</h2><p>Vscode：<a href="https://code.visualstudio.com/">https://code.visualstudio.com/</a><br>Node：<a href="http://nodejs.cn/">http://nodejs.cn/</a><br>npm 淘宝镜像:<a href="http://npm.taobao.org/">http://npm.taobao.org/</a></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">#经过下面的配置，以后所有的 npm install 都会经过淘宝的镜像地址下载npm config <span class="token keyword">set</span> registry https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>registry<span class="token punctuation">.</span>npm<span class="token punctuation">.</span>taobao<span class="token punctuation">.</span>org#查看npm配置信息npm config list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚手架工具-Vue-Cli"><a href="#脚手架工具-Vue-Cli" class="headerlink" title="脚手架工具 Vue-Cli"></a>脚手架工具 Vue-Cli</h2><p>安装 vue-cli:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 安装vue2<span class="token punctuation">.</span><span class="token constant">X</span>npm install vue<span class="token operator">-</span>cli <span class="token operator">-</span>g# 安装vue3<span class="token punctuation">.</span><span class="token constant">X</span>npm install <span class="token operator">-</span>g @vue<span class="token operator">/</span>cli# 输出版本号说明安装成功vue <span class="token operator">--</span>version# 进入你的项目目录cd workspace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个基于 webpack 模板的 vue 应用程序:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 这里的 mytest 是项目名称vue init webpack mytest <span class="token comment">//vue2.X</span>vue create mytest <span class="token comment">//vue3.X</span># 初始化并运行npm installnpm run dev <span class="token comment">//vue2.X</span>npm run serve <span class="token comment">//vue2.X</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="目录详解"><a href="#目录详解" class="headerlink" title="目录详解"></a>目录详解</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 安装vue2<span class="token punctuation">.</span><span class="token constant">X</span><span class="token number">1</span>、build：构建脚本目录　<span class="token number">1</span>）build<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 生产环境构建脚本；　<span class="token number">2</span>）check<span class="token operator">-</span>versions<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 检查npm，node<span class="token punctuation">.</span>js版本；　<span class="token number">3</span>）utils<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 构建相关工具方法；　<span class="token number">5</span>）webpack<span class="token punctuation">.</span>base<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> webpack基本配置；　<span class="token number">6</span>）webpack<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> webpack开发环境配置；　<span class="token number">7</span>）webpack<span class="token punctuation">.</span>prod<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> webpack生产环境配置；<span class="token number">2</span>、config：项目配置　<span class="token number">1</span>）dev<span class="token punctuation">.</span>env<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 开发环境变量；　<span class="token number">2</span>）index<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 项目配置文件；　<span class="token number">3</span>）prod<span class="token punctuation">.</span>env<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 生产环境变量；<span class="token number">3</span>、node_modules：npm 加载的项目依赖模块<span class="token number">4</span>、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：　<span class="token number">1</span>）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；　<span class="token number">2</span>）components：组件目录，我们写的组件就放在这个目录里面；　<span class="token number">3</span>）router：前端路由，我们需要配置的路由路径写在index<span class="token punctuation">.</span>js里面；　<span class="token number">4</span>）App<span class="token punctuation">.</span>vue：根组件；　<span class="token number">5</span>）main<span class="token punctuation">.</span>js：入口js文件；<span class="token number">5</span>、<span class="token keyword">static</span>：静态资源目录，如图片、字体等。不会被webpack构建<span class="token number">6</span>、index<span class="token punctuation">.</span>html：首页入口文件，可以添加一些 meta 信息等<span class="token number">7</span>、<span class="token keyword">package</span><span class="token punctuation">.</span>json：npm包配置文件，定义了项目的npm脚本，依赖包等信息<span class="token number">8</span>、<span class="token constant">README</span><span class="token punctuation">.</span>md：项目的说明文档，markdown 格式<span class="token number">9</span>、<span class="token punctuation">.</span>xxxx文件：这些是一些配置文件，包括语法配置，git配置等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"># 安装vue3<span class="token punctuation">.</span><span class="token constant">X</span><span class="token number">1</span>、<span class="token keyword">public</span>：　<span class="token number">1</span>）favicon<span class="token punctuation">.</span>ico <span class="token operator">==</span><span class="token operator">></span> 网页logo；　<span class="token number">2</span>）index<span class="token punctuation">.</span>html：首页入口文件，可以添加一些 meta 信息等<span class="token number">2</span>、node_modules：npm 加载的项目依赖模块<span class="token number">3</span>、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：　<span class="token number">1</span>）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；　<span class="token number">2</span>）components：组件目录，我们写的组件就放在这个目录里面；　<span class="token number">3</span>）router：前端路由，我们需要配置的路由路径写在index<span class="token punctuation">.</span>js里面；　<span class="token number">4</span>）App<span class="token punctuation">.</span>vue：根组件；　<span class="token number">5</span>）main<span class="token punctuation">.</span>js：入口js文件；<span class="token number">4</span>、config：项目配置　<span class="token number">1</span>）vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js <span class="token operator">==</span><span class="token operator">></span> 配置环境变量；<span class="token comment">//一级目录自建</span><span class="token number">5</span>、<span class="token keyword">package</span><span class="token punctuation">.</span>json：npm包配置文件，定义了项目的npm脚本，依赖包等信息<span class="token number">6</span>、<span class="token constant">README</span><span class="token punctuation">.</span>md：项目的说明文档，markdown 格式<span class="token number">7</span>、<span class="token punctuation">.</span>xxxx文件：这些是一些配置文件，包括语法配置，git配置等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//vue.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">baseUrl</span><span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">===</span> <span class="token string">'production'</span> <span class="token operator">?</span> <span class="token string">'/online/'</span> <span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment">// outputDir: 在npm run build时 生成文件的目录 type:string, default:'dist'</span>  <span class="token comment">// outputDir: 'dist',</span>  <span class="token comment">// pages:&#123; type:Object,Default:undfind &#125;</span>  <span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8888</span><span class="token punctuation">,</span> <span class="token comment">// 端口号</span>    <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token literal-property property">https</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// https:&#123;type:Boolean&#125;</span>    <span class="token literal-property property">open</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//配置自动启动浏览器</span>    <span class="token comment">// proxy: 'http://localhost:4000' // 配置跨域处理,只有一个代理</span>    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string-property property">'/api'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'&lt;url>'</span><span class="token punctuation">,</span>        <span class="token literal-property property">ws</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token literal-property property">changeOrigin</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string-property property">'/foo'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">'&lt;other_url>'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 配置多个代理</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装-vuex、axios、elemnet-ui、sass、less-等依赖"><a href="#安装-vuex、axios、elemnet-ui、sass、less-等依赖" class="headerlink" title="安装 vuex、axios、elemnet-ui、sass、less 等依赖"></a>安装 vuex、axios、elemnet-ui、sass、less 等依赖</h2><p>Axios 依赖:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在项目根目录下添加文件夹 utils，新建文件 interceptor.js，添加如下代码：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 在官方的axios的基础上封装一个添加拦截器的axios</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token comment">// 引入路由</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'../src/router'</span><span class="token comment">// 配置默认的请求地址头（process.env.VUE_APP_Back）这是走得配置文件中配置的地址，需要改成自己的地址</span>axios<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>baseURL <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_Back<span class="token comment">// 全局添加拦截器的作用是可以在每个API前面加上headers的token验证</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token parameter">config</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 判断token是否存在和是否需要token验证的路由</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> config<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 处理退出响应的拦截器 err可以捕获状态，来进行响应的处理</span>axios<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  <span class="token parameter">response</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 当状态码等于200时</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data      <span class="token comment">// 如果code是-1 说明用户注销或者token已经过期了 需要消除localstorage中的token</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">clearHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> response  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">.</span>response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'服务器出现问题，请稍后重试！'</span><span class="token punctuation">)</span>      <span class="token comment">// 跳转到登录界面</span>      router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 获取状态码</span>    <span class="token keyword">const</span> status <span class="token operator">=</span> err<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status    <span class="token keyword">switch</span> <span class="token punctuation">(</span>      status <span class="token comment">// 其他情况补充处理</span>    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token number">500</span><span class="token operator">:</span>      <span class="token keyword">case</span> <span class="token number">400</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'服务器出现问题，请稍后重试！'</span><span class="token punctuation">)</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token number">401</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'访问资源未授权，请登陆后重试！'</span><span class="token punctuation">)</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token number">403</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求资源暂时不可用，请登陆后重试！'</span><span class="token punctuation">)</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token number">404</span><span class="token operator">:</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>$message<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'请求资源暂不存在，请稍后重试！'</span><span class="token punctuation">)</span>        router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'login'</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 消除localstorage和vuex中的token</span><span class="token keyword">function</span> <span class="token function">clearHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span>  <span class="token comment">// 跳转首页</span>  router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/home'</span><span class="token punctuation">,</span>    <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">redirect</span><span class="token operator">:</span> router<span class="token punctuation">.</span>currentRoute<span class="token punctuation">.</span>path    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>main.js 中引入拦截器文件</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">'../utils/interceptor'</span><span class="token class-name">Vue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>$axios <span class="token operator">=</span> axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Element 依赖:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install element<span class="token operator">-</span>ui <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>main.js 中添加：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> ElementUI <span class="token keyword">from</span> <span class="token string">'element-ui'</span><span class="token keyword">import</span> <span class="token string">'element-ui/lib/theme-chalk/index.css'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>ElementUI<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Sass 依赖:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install node<span class="token operator">-</span>sass sass<span class="token operator">-</span>loader <span class="token operator">--</span>save<span class="token operator">-</span>dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 sass 的地方添加 lang&#x3D;scss</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"scss"</span> <span class="token operator">></span><span class="token literal-property property">ps</span><span class="token operator">:</span> 依赖安装失败可能是版本不一致，或者太高所导致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Less 依赖:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">npm install less less<span class="token operator">-</span>loader <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用 less 的地方添加 lang&#x3D;less</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> <span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>解决 vue 不能自动打开浏览器的问题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>）打开config <span class="token operator">==</span><span class="token operator">></span> index<span class="token punctuation">.</span>js<span class="token number">2</span>）module<span class="token punctuation">.</span>exports配置中找到autoOpenBrowser，默认设置的是<span class="token boolean">false</span><span class="token number">3</span><span class="token punctuation">)</span> 改为<span class="token boolean">true</span>重启一下，就能自动打开浏览器了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>为了避免端口冲突，也可以修改 port，打开目录同上</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8010</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决每次启动需改 IP 地址的问题：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> os <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'os'</span><span class="token punctuation">)</span><span class="token comment">//自动获取本机局域网ip地址</span><span class="token keyword">function</span> <span class="token function">getNetworkIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> needHost <span class="token operator">=</span> <span class="token string">''</span> <span class="token comment">// 打开的host</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 获得网络接口列表</span>    <span class="token keyword">let</span> network <span class="token operator">=</span> os<span class="token punctuation">.</span><span class="token function">networkInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> dev <span class="token keyword">in</span> network<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> iface <span class="token operator">=</span> network<span class="token punctuation">[</span>dev<span class="token punctuation">]</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> iface<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> alias <span class="token operator">=</span> iface<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>alias<span class="token punctuation">.</span>family <span class="token operator">===</span> <span class="token string">'IPv4'</span> <span class="token operator">&amp;&amp;</span> alias<span class="token punctuation">.</span>address <span class="token operator">!==</span> <span class="token string">'127.0.0.1'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>alias<span class="token punctuation">.</span>internal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          needHost <span class="token operator">=</span> alias<span class="token punctuation">.</span>address        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    needHost <span class="token operator">=</span> <span class="token string">'localhost'</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> needHost<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改 host 即可：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token function">getNetworkIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考地址"><a href="#参考地址" class="headerlink" title="参考地址"></a>参考地址</h2><p><a href="https://blog.csdn.net/liul99/article/details/95603254">https://blog.csdn.net/liul99/article/details/95603254</a><br><a href="https://blog.csdn.net/m0_37508531/article/details/107321292">https://blog.csdn.net/m0_37508531/article/details/107321292</a><br><a href="https://blog.csdn.net/weixin_47906106/article/details/119057019">https://blog.csdn.net/weixin_47906106/article/details/119057019</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack打包</title>
      <link href="/wly/2022/02/07/webpack-da-bao/"/>
      <url>/wly/2022/02/07/webpack-da-bao/</url>
      
        <content type="html"><![CDATA[<h1 id="webpack-打包"><a href="#webpack-打包" class="headerlink" title="webpack 打包"></a>webpack 打包</h1><h2 id="webpack-在项目中的常见配置"><a href="#webpack-在项目中的常见配置" class="headerlink" title="webpack 在项目中的常见配置"></a>webpack 在项目中的常见配置</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.config.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">mode</span><span class="token operator">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span> <span class="token comment">// development|production</span><span class="token literal-property property">entry</span><span class="token operator">:</span> '<span class="token punctuation">.</span><span class="token operator">/</span>src<span class="token operator">/</span>js<span class="token operator">/</span>entry<span class="token punctuation">.</span>js<span class="token punctuation">,</span> <span class="token comment">// 入口配置</span><span class="token literal-property property">output</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token comment">// 输出配置</span>     <span class="token literal-property property">filename</span> <span class="token operator">:</span> <span class="token string">'index.js'</span><span class="token punctuation">,</span><span class="token comment">// 打包输出文件名</span>     <span class="token literal-property property">path</span> <span class="token operator">:</span> __dirname <span class="token operator">+</span> <span class="token string">'/out'</span><span class="token comment">// 打包输出路径（必须绝对路径，否则报错）</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token literal-property property">module</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token literal-property property">rules</span><span class="token operator">:</span> <span class="token punctuation">[</span>           <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>           <span class="token punctuation">&#123;</span><span class="token literal-property property">test</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">.css$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token literal-property property">use</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token string">'css-loader'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 放置loader加载器，webpack本身只能打包commonjs规范的js文件，用于处理其他文件或语法</span><span class="token literal-property property">plugins</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// 插件，扩展功能</span><span class="token comment">// 以下内容进阶篇再涉及</span><span class="token literal-property property">resolve</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 为引入的模块起别名</span><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// webpack-dev-server</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-打包-vue-项目之后生成的-dist-文件该怎么启动运行"><a href="#webpack-打包-vue-项目之后生成的-dist-文件该怎么启动运行" class="headerlink" title="webpack 打包 vue 项目之后生成的 dist 文件该怎么启动运行"></a>webpack 打包 vue 项目之后生成的 dist 文件该怎么启动运行</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>安装express<span class="token operator">-</span>generator生成器npm install express<span class="token operator">-</span>generator <span class="token operator">-</span>g<span class="token number">2.</span> 创建一个express项目express expressDemo （expressDemo是项目名）<span class="token number">3.</span>进入项目目录，安装相关项目依赖cd expressDemo  npm install<span class="token number">4.</span>将dist文件夹下的所有文件复制到express项目的publick文件夹下面<span class="token number">5.</span>运行 npm start 来启动express项目<span class="token number">6.</span><span class="token literal-property property">输入localhost</span><span class="token operator">:</span><span class="token number">3000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-loader-是做什么的"><a href="#vue-loader-是做什么的" class="headerlink" title="vue-loader 是做什么的"></a>vue-loader 是做什么的</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">    概念：vue<span class="token operator">-</span>loader是基于webpack的一个loader，解析和转换<span class="token punctuation">.</span>vue文件。提取出其中的逻辑代码script，样式代码style，以及<span class="token constant">HTML</span>模板template，再分别把他们交给对应的loader去处理。    用途：js可以写es6、style样式可以是less或scss等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="webpack-的作用是什么"><a href="#webpack-的作用是什么" class="headerlink" title="webpack 的作用是什么"></a>webpack 的作用是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">webpack是一个打包器（bundler），它能将多个js文件打包成一个文件（其实不止能打包js文件，也能打包其他类型的文件，比如css文件，json文件等）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="webpack-打包的流程是什么"><a href="#webpack-打包的流程是什么" class="headerlink" title="webpack 打包的流程是什么"></a>webpack 打包的流程是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Webpack首先会把配置参数和命令行的参数及默认参数合并，并初始化需要使用的插件和配置插件等执行环境所需要的参数；初始化完成后会调用Compiler的run来真正启动webpack编译构建过程，webpack的构建流程包括compile、make、build、seal、emit阶段，执行完这些阶段就完成了构建过程<span class="token punctuation">.</span><span class="token function">大概阶段：1、初始化参数</span><span class="token punctuation">(</span>加载插件和处理入口等<span class="token punctuation">)</span>        <span class="token number">2</span><span class="token function">、编译阶段</span><span class="token punctuation">(</span>读取文件<span class="token operator">-</span>编译模块<span class="token operator">-</span>分析模块依赖关系<span class="token punctuation">)</span>        <span class="token number">3</span><span class="token function">、文件输出</span><span class="token punctuation">(</span>渲染源码<span class="token operator">-</span>执行文件输出<span class="token operator">-</span>全部完成<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记(vue篇)</title>
      <link href="/wly/2022/02/07/qian-duan-bi-ji-vue-pian/"/>
      <url>/wly/2022/02/07/qian-duan-bi-ji-vue-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="vue笔记总结"><a href="#vue笔记总结" class="headerlink" title="vue笔记总结"></a>vue笔记总结</h1><h2 id="什么是Vue？"><a href="#什么是Vue？" class="headerlink" title="什么是Vue？"></a>什么是Vue？</h2><p>Vue是一套用于构建用户界面的渐进式JavaScript框架<br>形成Vue渐进式框架的核心概念为：<span class="p red">组件化，MVVM，响应式和生命周期</span></p><h2 id="vue指令"><a href="#vue指令" class="headerlink" title="vue指令"></a>vue指令</h2><p>指令: <span class="p red">v-on，v-model，v-cloak，v-once，v-pre，v-text，v-html，v-for，v-show，v-if， v-else，v-else-if</span></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span>on 是事件绑定，可以缩写为@常用的修饰符也有很多：比如<span class="token punctuation">.</span>stop用来取消冒泡事件；<span class="token punctuation">.</span>prevent阻止默认事件；<span class="token punctuation">.</span>once只执行一次；当然还有许多。v<span class="token operator">-</span>model 是双向绑定，一般用于文本框、单选、复选、下拉；常用的修饰符有<span class="token punctuation">.</span>lazy <span class="token operator">-</span> 取代 input 监听 change 事件<span class="token punctuation">.</span>number <span class="token operator">-</span> 输入字符串转为有效的数字<span class="token punctuation">.</span>trim <span class="token operator">-</span> 输入首尾空格过滤v<span class="token operator">-</span>cloak使用 v<span class="token operator">-</span>cloak 能够解决插值表达式闪烁的问题v<span class="token operator">-</span>once只渲染一次v<span class="token operator">-</span>pre跳出渲染v<span class="token operator">-</span>text 可以将data中的文本放入元素中v<span class="token operator">-</span>html 可以识别标签v<span class="token operator">-</span><span class="token keyword">for</span> 和原生<span class="token constant">JS</span>的<span class="token keyword">for</span>循环差不多v<span class="token operator">-</span>show 判断元素显示还是隐藏v<span class="token operator">-</span>show<span class="token operator">=</span>“<span class="token boolean">true</span><span class="token operator">/</span><span class="token boolean">false</span>”v<span class="token operator">-</span><span class="token keyword">if</span>是条件判断<span class="token punctuation">,</span>判断元素显示还是隐藏当然还有配套的v<span class="token operator">-</span><span class="token keyword">else</span>、v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解mvvm这种设计模式"><a href="#怎么理解mvvm这种设计模式" class="headerlink" title="怎么理解mvvm这种设计模式"></a>怎么理解mvvm这种设计模式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Model–View–ViewModel（<span class="token constant">MVVM</span>）是一个软件架构设计模式，是一种简化用户界面的事件驱动编程方式。<span class="token constant">MVVM</span> <span class="token constant">M</span> Model 模型 指的是数据层 <span class="token constant">V</span> View  视图 指的是用户页面 <span class="token constant">VM</span> ViewModel 视图模型视图模型是<span class="token constant">MVVM</span>模式的核心，它是连接view和model的桥梁，<span class="token constant">MVVM</span>实现了view和model的自动同步，当model的属性改变时，我们不用自己手动操作<span class="token constant">DOM</span>元素，来改变view的显示，称之为数据的双向绑定。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v-if和v-show的区别，使用场景区别"><a href="#v-if和v-show的区别，使用场景区别" class="headerlink" title="v-if和v-show的区别，使用场景区别"></a>v-if和v-show的区别，使用场景区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">v<span class="token operator">-</span><span class="token keyword">if</span>和v<span class="token operator">-</span>show看起来似乎都是元素显示和隐藏，但是这两个选项是有区别的<span class="token operator">:</span><span class="token number">1</span>、v<span class="token operator">-</span><span class="token keyword">if</span>在条件切换时，会对标签进行适当的创建和销毁，而v<span class="token operator">-</span>show则仅在初始化时加载一次，因此v<span class="token operator">-</span><span class="token keyword">if</span>的开销相对来说会比v<span class="token operator">-</span>show大。<span class="token number">2</span>、v<span class="token operator">-</span><span class="token keyword">if</span>是惰性的，只有当条件为真时才会真正渲染标签；如果初始条件不为真，则v<span class="token operator">-</span><span class="token keyword">if</span>不会去渲染标签。v<span class="token operator">-</span>show则无论初始条件是否成立，都会渲染标签，它仅仅做的只是简单的<span class="token constant">CSS</span>（display）切换。<span class="token number">3</span>、v<span class="token operator">-</span><span class="token keyword">if</span>适用于不需要频繁切换元素显示和隐藏的情况   v<span class="token operator">-</span>show适用于需要频繁切换元素的显示和隐藏的场景。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue事件修饰符和按键修饰符有哪些"><a href="#vue事件修饰符和按键修饰符有哪些" class="headerlink" title="vue事件修饰符和按键修饰符有哪些"></a>vue事件修饰符和按键修饰符有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">事件修饰符：  <span class="token punctuation">.</span>prevent  阻止事件默认行为  <span class="token punctuation">.</span>stop     阻止事件冒泡  <span class="token punctuation">.</span>capture  设置事件捕获机制  <span class="token punctuation">.</span>self     只有点击元素自身才能触发事件  <span class="token punctuation">.</span>once     事件只触发一次 按键修饰符：  <span class="token punctuation">.</span>tab      空格  <span class="token punctuation">.</span>enter    回车  <span class="token punctuation">.</span>esc      返回   <span class="token punctuation">.</span>space    空格  <span class="token punctuation">.</span>delete   捕获<span class="token string">"删除"</span>和<span class="token string">"空格"</span>键  <span class="token punctuation">.</span>up       上  <span class="token punctuation">.</span>down     下  <span class="token punctuation">.</span>left     左  <span class="token punctuation">.</span>right    右<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v-model修饰符有哪些"><a href="#v-model修饰符有哪些" class="headerlink" title="v-model修饰符有哪些"></a>v-model修饰符有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">.</span>trim   去除首尾空格<span class="token punctuation">.</span>lazy   只在输入框失去焦点或按回车键时更新内容，不是实时更新<span class="token punctuation">.</span>number <span class="token function">将数据转换成number类型</span><span class="token punctuation">(</span>原本是字符串类型<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="v-for中为什么要加key，原理是什么"><a href="#v-for中为什么要加key，原理是什么" class="headerlink" title="v-for中为什么要加key，原理是什么"></a>v-for中为什么要加key，原理是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">作用：  <span class="token number">1</span><span class="token punctuation">.</span>key的作用主要是为了高效的更新虚拟<span class="token constant">DOM</span>，提高渲染性能。  <span class="token number">2</span><span class="token punctuation">.</span>key属性可以避免数据混乱的情况出现。原理：  <span class="token number">1</span><span class="token punctuation">.</span>vue实现了一套虚拟<span class="token constant">DOM</span>，使我们可以不直接操作<span class="token constant">DOM</span>元素只操作数据，就可以重新渲染页面  <span class="token number">2.</span>当页面数据发生变化时，Diff算法只会比较同一层级的节点；  <span class="token number">3.</span>如果节点类型不同，直接干掉前面的节点，再创建并插入新的节点，  不会再比较这个节点后面的子节点；如果节点类型相同，则会重新设置该节点属性，从而实现节点更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="v-for和v-if的优先级"><a href="#v-for和v-if的优先级" class="headerlink" title="v-for和v-if的优先级"></a>v-for和v-if的优先级</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> v<span class="token operator">-</span><span class="token keyword">for</span>优先级高于v<span class="token operator">-</span><span class="token keyword">if</span>如果同时出现v<span class="token operator">-</span><span class="token keyword">for</span>和v<span class="token operator">-</span><span class="token keyword">if</span>，无论判断条件是否成立，都会执行一遍v<span class="token operator">-</span><span class="token keyword">for</span>循环，这样浪费性能，所以要尽可能的避免两者一起使用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="插槽（solt）"><a href="#插槽（solt）" class="headerlink" title="插槽（solt）"></a>插槽（solt）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、什么是插槽<span class="token number">1.1</span> 插槽（Slot）是Vue提出来的一个概念，插槽用于决定将所携带的内容，  插入到指定的某个位置，从而使模板分块，具有模块化的特质和更大的重用性。<span class="token number">1.2</span> 插槽显不显示、怎样显示是由父组件来控制的，而插槽在哪里显示就由子组件来进行控制<span class="token number">2</span>、插槽使用<span class="token number">2.1</span> 默认插槽  在子组件中写入slot，slot所在的位置就是父组件要显示的内容  <span class="token number">2.2</span> 具名插槽  在子组件中定义了三个slot标签，其中有两个分别添加了name属性header和footer    在父组件中使用template并写入对应的slot名字来指定该内容在子组件中现实的位置  <span class="token number">2.3</span> 作用域插槽  在子组件的slot标签上绑定需要的值    <span class="token operator">&lt;</span>slot <span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"user"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>slot<span class="token operator">></span>在父组件上使用slot<span class="token operator">-</span>scope<span class="token operator">=</span>“user”来接收子组件传过来的值 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件中的data为什么是函数-new-Vue-实例里，data-可以直接是一个对象"><a href="#组件中的data为什么是函数-new-Vue-实例里，data-可以直接是一个对象" class="headerlink" title="组件中的data为什么是函数,new Vue 实例里，data 可以直接是一个对象"></a>组件中的data为什么是函数,new Vue 实例里，data 可以直接是一个对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、组件是用来复用的，组件中的data写成一个函数<span class="token punctuation">,</span>数据以函数返回值形式定义<span class="token punctuation">,</span>函数有独立的作用域，这样每复用一次组件<span class="token punctuation">,</span>就会返回一份新的data<span class="token punctuation">,</span>类似于给每个组件实例创建一个私有的数据空间<span class="token punctuation">,</span>让各个组件实例维护各自的数据。<span class="token number">2</span>、而单纯的写成对象形式<span class="token punctuation">,</span>由于对象是引用类型，就使得所有组件实例共用了一份data<span class="token punctuation">,</span>就会造成一个变了全都会变的结果。<span class="token number">3</span>、因为<span class="token keyword">new</span> <span class="token class-name">vue</span>里面的代码是不存在复用的情况，所以可以写成对象形式<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-中怎么给-data-动态添加数据，为什么要这样写"><a href="#vue-中怎么给-data-动态添加数据，为什么要这样写" class="headerlink" title="vue 中怎么给 data 动态添加数据，为什么要这样写"></a>vue 中怎么给 data 动态添加数据，为什么要这样写</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span>官方文档定义：如果在vue实例创建之后添加新的属性到实例上，她不会触发视图更新。<span class="token number">2.</span>原因：受现代JavaScript的限制，vue不能检测到对象属性的添加或删除。由于vue会在初始化实例是对属性执行getter<span class="token operator">/</span>setter转换过程（使用Object<span class="token punctuation">.</span>defineProperty进行数据的劫持）。所以属性必须在data对象上存在才能让vue转换它，这样才能让它是响应的。    方法：<span class="token number">1</span><span class="token punctuation">.</span>this<span class="token punctuation">.</span><span class="token function">$set</span><span class="token punctuation">(</span>对象名，属性，值<span class="token punctuation">)</span>或 Vue<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>对象名，属性，值<span class="token punctuation">)</span>          <span class="token number">2</span><span class="token punctuation">.</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span>添加多个属性          例如：            <span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>            <span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">&#125;</span>            <span class="token keyword">const</span> returnedTarget <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>returnedTarget<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//&#123; a: 1, b: 4, c: 5 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="computed和watch的区别是什么"><a href="#computed和watch的区别是什么" class="headerlink" title="computed和watch的区别是什么"></a>computed和watch的区别是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">计算属性computed：<span class="token number">1</span>、支持缓存，只有依赖数据发生改变，才会重新进行计算<span class="token number">2</span>、不支持异步，当computed内有异步操作时无效，无法监听数据的变化<span class="token number">3</span>、如果computed需要对数据修改，需要写<span class="token keyword">get</span>和<span class="token keyword">set</span>两个方法，当数据变化时，调用<span class="token keyword">set</span>方法。<span class="token number">4</span>、computed擅长处理的场景：一个数据受多个数据影响，例如购物车计算总价侦听属性watch：<span class="token number">1</span>、不支持缓存，数据变，直接会触发相应的操作；<span class="token number">2</span>、watch支持异步；监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；<span class="token number">3</span>、immediate：组件加载立即触发回调函数执行<span class="token number">4</span><span class="token literal-property property">、deep</span><span class="token operator">:</span><span class="token boolean">true</span>的意思就是深入监听，任何修改obj里面任何一个属性都会触发这个监听器里的 handler方法来处理逻辑<span class="token number">5</span>、watch擅长处理的场景：一个数据影响多个数据，例如搜索框<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="组件化和模块化的区别"><a href="#组件化和模块化的区别" class="headerlink" title="组件化和模块化的区别"></a>组件化和模块化的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、组件相当于库，把一些能在项目里或者不同类型项目中可复用的代码进行工具性的封装。<span class="token number">2</span>、模块相应于业务逻辑模块，把同一类型项目里的功能逻辑进行进行需求性的封装。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="怎么理解vue中的虚拟DOM"><a href="#怎么理解vue中的虚拟DOM" class="headerlink" title="怎么理解vue中的虚拟DOM"></a>怎么理解vue中的虚拟DOM</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">原理：用 JavaScript 对象模拟真实 <span class="token constant">DOM</span> 树，对真实 <span class="token constant">DOM</span> 进行抽象；diff 算法 — 比较两棵虚拟 <span class="token constant">DOM</span> 树的差异；pach 算法 — 将两个虚拟 <span class="token constant">DOM</span> 对象的差异应用到真正的 <span class="token constant">DOM</span> 树。好处：<span class="token number">1</span>、性能优化  <span class="token number">2</span>、无需手动操作<span class="token constant">DOM</span>  <span class="token number">3</span>、可以跨平台，服务端渲染等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解vue的生命周期"><a href="#怎么理解vue的生命周期" class="headerlink" title="怎么理解vue的生命周期"></a>怎么理解vue的生命周期</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">vue的生命周期：vue实例从创建到销毁的全过程，这个过程可以分为<span class="token number">3</span>个阶段   第一阶段：初始化阶段   创建vue实例<span class="token punctuation">,</span>准备数据<span class="token punctuation">,</span>准备模板<span class="token punctuation">,</span>渲染视图   第二阶段：数据更新阶段 当数据变化时，会进行新旧<span class="token constant">DOM</span>的对比，对比出差异的部分进行差异化更新。   第三阶段：实例销毁阶段 当vm<span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>被调用，vue实例就会被销毁，   释放相关资源，此时再更新数据，视图不会再变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-钩子函数有哪些，有哪些使用的场景"><a href="#vue-钩子函数有哪些，有哪些使用的场景" class="headerlink" title="vue 钩子函数有哪些，有哪些使用的场景"></a>vue 钩子函数有哪些，有哪些使用的场景</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、各阶段包含钩子： beforeCreate  在data数据注入到vm实例之前，此时vm身上没有数据    created       在data数据注入到vm实例之前，此时vm身上有数据   beforeMount   生成的结构替换视图之前，此时<span class="token constant">DOM</span>还没更新   mounted       生成的结构替换视图之前，此时<span class="token constant">DOM</span>已经更新完成    beforeUpdate  数据变化了，dom更新之前    updated       数据变化了，dom更新之后        activated     被keep<span class="token operator">-</span>alive缓存的组件激活时调用    deactivated   被keep<span class="token operator">-</span>alive缓存的组件停用时调用    beforeDestroy 实例销毁，是否资源之前    destroyed     实例销毁，是否资源之后    这些钩子函数会在vue的生命周期的不同阶段，自动被vue调用<span class="token number">2</span>、常用的钩子函数使用场景：    beforeCreate  做loading的一些渲染    created       结束loading， 发送数据的请求，拿数据    mounted       可以对dom进行操作    updated       监视数据的更新    beforeDestroy 销毁非vue资源，防止内存泄漏，例如清除定时器    activated     当我们运用了组件缓存时，如果想每次切换都发送一次请求的话，需要把请求函数写在activated中，而写在created或mounted中其只会在首次加载该组件的时候起作用。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue-的父组件和子组件生命周期钩子函数执行顺序"><a href="#Vue-的父组件和子组件生命周期钩子函数执行顺序" class="headerlink" title="Vue 的父组件和子组件生命周期钩子函数执行顺序"></a>Vue 的父组件和子组件生命周期钩子函数执行顺序</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 <span class="token number">4</span> 部分：  <span class="token number">1</span>）加载渲染过程  父 beforeCreate <span class="token operator">-</span><span class="token operator">></span> 父 created <span class="token operator">-</span><span class="token operator">></span> 父 beforeMount <span class="token operator">-</span><span class="token operator">></span> 子 beforeCreate <span class="token operator">-</span><span class="token operator">></span> 子 created <span class="token operator">-</span><span class="token operator">></span> 子 beforeMount <span class="token operator">-</span><span class="token operator">></span> 子 mounted <span class="token operator">-</span><span class="token operator">></span> 父 mounted  <span class="token number">2</span>）子组件更新过程     父 beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 子 beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 子 updated <span class="token operator">-</span><span class="token operator">></span> 父 updated  <span class="token number">3</span>）父组件更新过程     父 beforeUpdate <span class="token operator">-</span><span class="token operator">></span> 父 updated  <span class="token number">4</span>）<span class="token number">4</span>）销毁过程  父 beforeDestroy <span class="token operator">-</span><span class="token operator">></span> 子 beforeDestroy <span class="token operator">-</span><span class="token operator">></span> 子 destroyed <span class="token operator">-</span><span class="token operator">></span> 父 destroyed <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue组件传值的方式"><a href="#vue组件传值的方式" class="headerlink" title="vue组件传值的方式"></a>vue组件传值的方式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、父传子    通过props传递    父组件： <span class="token operator">&lt;</span>child <span class="token operator">:</span>list <span class="token operator">=</span> <span class="token string">'list'</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token literal-property property">子组件</span><span class="token operator">:</span> props<span class="token punctuation">[</span><span class="token string">'list'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>接收数据<span class="token punctuation">,</span>接受之后使用和data中定义数据使用方式一样<span class="token number">2</span>、子传父<span class="token function">在父组件中给子组件绑定一个自定义的事件，子组件通过$emit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>触发该事件并传值。    父组件： <span class="token operator">&lt;</span>child @receive <span class="token operator">=</span> <span class="token string">'getData'</span> <span class="token operator">/</span><span class="token operator">></span>            <span class="token function">getData</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>value就是接收的值<span class="token punctuation">&#125;</span>    <span class="token literal-property property">子组件</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'receive'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token number">3</span>、兄弟组件传值通过中央通信 <span class="token keyword">let</span> bus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token constant">A</span><span class="token literal-property property">组件：methods</span> <span class="token operator">:</span><span class="token punctuation">&#123;</span>         <span class="token function">sendData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                bus<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">'getData'</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>              <span class="token punctuation">&#125;</span> 发送    <span class="token constant">B</span><span class="token function">组件：created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        bus<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span>‘getData’<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>value就是接收的数据<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> 进行数据接收<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-钩子函数有哪些"><a href="#vue-钩子函数有哪些" class="headerlink" title="vue 钩子函数有哪些"></a>vue 钩子函数有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">beforeCreate 属性 方法加载之前created    属性和方法加载完成  数据接口加载的时候就在 createdbeforeMount 组件渲染之前mounted   组件加载完成以后   获取元素就在mountedbeforeUpdate 数据更新之前updated   数据更新完成beforeDestory 组件即将销毁destoryed   组件销毁完成deactivated：在被包裹组件停止使用时调用activate：是在被包裹组建被激活的状态下使用的生命周期钩子<span class="token function">errorCaptured</span><span class="token punctuation">(</span>错误调用<span class="token punctuation">)</span>：当捕获一个来自后代组件的错误时被调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nextTick是什么？原理是什么？使用的场景"><a href="#nextTick是什么？原理是什么？使用的场景" class="headerlink" title="$nextTick是什么？原理是什么？使用的场景"></a>$nextTick是什么？原理是什么？使用的场景</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">背景：<span class="token number">1</span>、简单来说，Vue 在修改数据后，视图不会立刻更新，  而是等同一事件循环中的所有数据变化完成之后，再统一进行视图更新。    定义：<span class="token number">2</span>、在下次 <span class="token constant">DOM</span> 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，  获取更新后的 <span class="token constant">DOM</span><span class="token function">。nextTick</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，是将回调函数延迟在下一次dom更新数据后调用，  简单的理解是：当数据更新了，在dom中渲染后，自动执行该函数。    原理<span class="token number">3</span>、vue用异步队列的方式来控制<span class="token constant">DOM</span>更新和nextTick回调先后执行。简单来说，nextTick是做了promise加上setTimeout的封装<span class="token punctuation">,</span>利用事件换行机制，  来确保当nextTick出现时，都是在我们所有操作<span class="token constant">DOM</span>更新之后的。场景：<span class="token number">4.1</span> 点击获取元素宽度  <span class="token number">4.2</span> 使用swiper插件通过 ajax 请求图片后的滑动问题  <span class="token number">4.3</span> 点击按钮显示原本以 v<span class="token operator">-</span>show <span class="token operator">=</span> <span class="token boolean">false</span> 隐藏起来的输入框，并获取焦点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue是如何获取DOM"><a href="#vue是如何获取DOM" class="headerlink" title="vue是如何获取DOM"></a>vue是如何获取DOM</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、先给标签设置一个ref值，再通过<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>domName获取，这个操作要在mounted阶段进行。<span class="token number">2</span>、例如：<span class="token operator">&lt;</span>template<span class="token operator">></span><span class="token operator">&lt;</span>div ref<span class="token operator">=</span><span class="token string">"test"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token keyword">const</span> dom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>test <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="v-on可以监听多个方法吗"><a href="#v-on可以监听多个方法吗" class="headerlink" title="v-on可以监听多个方法吗"></a>v-on可以监听多个方法吗</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">可以例如：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>on<span class="token operator">=</span><span class="token string">"&#123; input:onInput,focus:onFocus &#125;"</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="谈谈你对-keep-alive-的了解"><a href="#谈谈你对-keep-alive-的了解" class="headerlink" title="谈谈你对 keep-alive 的了解"></a>谈谈你对 keep-alive 的了解</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、keep<span class="token operator">-</span>alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染<span class="token number">2</span>、一般结合路由和动态组件一起使用，用于缓存组件<span class="token number">3</span>、对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated4、提供 include 和 exclude 属性，两者都支持字符串或正则表达式，include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；例如：<span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive include<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span> <span class="token operator">&lt;</span>component<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> name 为 a 的组件将被缓存！<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span class="token operator">&lt;</span>keep<span class="token operator">-</span>alive exclude<span class="token operator">=</span><span class="token string">"a"</span><span class="token operator">></span> <span class="token operator">&lt;</span>component<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 除了 name 为 a 的组件都将被缓存！<span class="token operator">--</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>keep<span class="token operator">-</span>alive<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue中动态组件如何使用"><a href="#vue中动态组件如何使用" class="headerlink" title="vue中动态组件如何使用"></a>vue中动态组件如何使用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、在某个中使用 is 特性来切换不同的组件：<span class="token operator">&lt;</span>component <span class="token operator">:</span>is<span class="token operator">=</span><span class="token string">"TabComponent"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>component<span class="token operator">></span>  <span class="token literal-property property">TabComponent</span><span class="token operator">:</span>已注册组件的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="v-model的原理是什么"><a href="#v-model的原理是什么" class="headerlink" title="v-model的原理是什么"></a>v-model的原理是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、v<span class="token operator">-</span>model主要提供了两个功能，view层输入值影响data的属性值，属性值发生改变会更新层的数值变化<span class="token punctuation">.</span><span class="token number">2</span>、v<span class="token operator">-</span>model指令的实现：  <span class="token number">3.1</span> v<span class="token operator">-</span>bind<span class="token operator">:</span>绑定响应式数据  <span class="token number">3.2</span> <span class="token function">触发input事件并传递数据</span> <span class="token punctuation">(</span>核心和重点<span class="token punctuation">)</span><span class="token number">3</span><span class="token function">、其底层原理就是</span><span class="token punctuation">(</span>双向数据绑定原理<span class="token punctuation">)</span>：  <span class="token number">3.1</span> 一方面modal层通过defineProperty来劫持每个属性，一旦监听到变化通过相关的页面元素更新。      <span class="token number">3.2</span> 另一方面通过编译模板文件，为控件的v<span class="token operator">-</span>model绑定input事件，从而页面输入能实时更新相关data属性值。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue响应式的原理"><a href="#vue响应式的原理" class="headerlink" title="vue响应式的原理"></a>vue响应式的原理</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、原理：Vue 的响应式原理是核心是通过 <span class="token constant">ES5</span> 的 Object<span class="token punctuation">.</span>defindeProperty 进行数据劫持，  然后利用 <span class="token keyword">get</span> 和 <span class="token keyword">set</span> 方法进行获取和设置，data 中声明的属性都被添加到了<span class="token keyword">get</span>和<span class="token keyword">set</span>中，  当读取 data 中的数据时自动调用 <span class="token keyword">get</span> 方法，当修改 data 中的数据时，自动调用 <span class="token keyword">set</span> 方法，  检测到数据的变化，会通知观察者 Wacher，观察者 Wacher自动触发重新render 当前组件  （子组件不会重新渲染）<span class="token punctuation">,</span>生成新的虚拟 <span class="token constant">DOM</span> 树，  Vue 框架会遍历并对比新虚拟 <span class="token constant">DOM</span> 树和旧虚拟 <span class="token constant">DOM</span> 树中每个节点的差别，  并记录下来，最后，加载操作，将所有记录的不同点，局部修改到真实 <span class="token constant">DOM</span> 树上。<span class="token number">2</span>、底层代码实现：   <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"lis"</span><span class="token punctuation">,</span>        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>        <span class="token literal-property property">sex</span><span class="token operator">:</span> <span class="token string">"男"</span>    <span class="token punctuation">&#125;</span><span class="token comment">//  vue2.0实现  使用Object.defineProperty进行数据劫持</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> temp <span class="token operator">=</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> data<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> temp            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                temp <span class="token operator">=</span> value            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token comment">// vue3.0实现 使用Proxy 进行数据的代理</span>    <span class="token keyword">let</span> newData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue2-0和vue3-0响应式的区别"><a href="#vue2-0和vue3-0响应式的区别" class="headerlink" title="vue2.0和vue3.0响应式的区别"></a>vue2.0和vue3.0响应式的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、Object<span class="token punctuation">.</span>defineProperty   <span class="token number">1</span><span class="token punctuation">)</span> 用于监听对象的数据变化  <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">无法监听数组变化</span><span class="token punctuation">(</span>下标，长度<span class="token punctuation">)</span>  <span class="token number">3</span><span class="token punctuation">)</span> 只能劫持对象的自身属性，动态添加的劫持不到<span class="token number">2</span>、Proxy  <span class="token number">1</span><span class="token punctuation">)</span> proxy返回的是一个新对象， 可以通过操作返回的新的对象达到目的  <span class="token number">2</span>）可以监听到数组变化，也可以监听到动态添加的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="router和route的区别"><a href="#router和route的区别" class="headerlink" title="router和route的区别"></a>router和route的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、$router对象      <span class="token number">1</span>）$router对象是全局路由的实例，是router构造方法的实例      <span class="token number">2</span><span class="token function">）$router对象上的方法有：push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">2</span>、$route对象      <span class="token number">1</span>）$route对象表示当前的路由信息，包含了当前 <span class="token constant">URL</span> 解析得到的信息。  包含当前的路径，参数，query对象等      <span class="token number">2</span>）$route对象上的属性有：path、params、query、hash等等   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="路由传参params和query区别"><a href="#路由传参params和query区别" class="headerlink" title="路由传参params和query区别"></a>路由传参params和query区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  方式：params 和 query2区别：  <span class="token number">1</span>）params用的是name，传递的参数在地址栏不会显示，类似于post          <span class="token number">2</span>）query用的是path<span class="token punctuation">,</span>传递的参数会在地址栏显示出来，类似于<span class="token keyword">get</span>      <span class="token number">3</span>、举例说明：     <span class="token number">1</span>）params 传参    传： <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'particulars'</span><span class="token punctuation">,</span> <span class="token literal-property property">params</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       接：<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>params<span class="token punctuation">.</span>id          <span class="token number">2</span>）query传参       传：<span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/particulars'</span><span class="token punctuation">,</span> <span class="token literal-property property">query</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">id</span><span class="token operator">:</span> id <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>       接：<span class="token keyword">this</span><span class="token punctuation">.</span>$route<span class="token punctuation">.</span>query<span class="token punctuation">.</span>id<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue模版编译原理知道吗，能简单说一下吗"><a href="#Vue模版编译原理知道吗，能简单说一下吗" class="headerlink" title="Vue模版编译原理知道吗，能简单说一下吗"></a>Vue模版编译原理知道吗，能简单说一下吗</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、简单说，Vue的编译过程就是将template转化为render函数的过程。<span class="token number">2</span>、首先解析模版，生成<span class="token constant">AST</span><span class="token function">语法树</span><span class="token punctuation">(</span>一种用JavaScript对象的形式来描述整个模板<span class="token punctuation">)</span>。使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。<span class="token number">3</span>、Vue的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的<span class="token constant">DOM</span>也不会变化。那么优化过程就是深度遍历<span class="token constant">AST</span>树，按照相关条件对树节点进行标记。<span class="token function">这些被标记的节点</span><span class="token punctuation">(</span>静态节点<span class="token punctuation">)</span>我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。<span class="token number">4</span>、编译的最后一步是将优化后的<span class="token constant">AST</span>树转换为可执行的代码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SSR了解吗"><a href="#SSR了解吗" class="headerlink" title="SSR了解吗"></a>SSR了解吗</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、<span class="token constant">SSR</span>也就是服务端渲染，也就是将Vue在客户端把标签渲染成<span class="token constant">HTML</span>的工作放在服务端完成，然后再把html直接返回给客户端。<span class="token number">2</span>、<span class="token constant">SSR</span>有着更好的<span class="token constant">SEO</span>、并且首屏加载速度更快等优点。不过它也有一些缺点，比如我们的开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子，当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node<span class="token punctuation">.</span>js的运行环境。还有就是服务器的压力比较大。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="你都做过哪些Vue的性能优化"><a href="#你都做过哪些Vue的性能优化" class="headerlink" title="你都做过哪些Vue的性能优化"></a>你都做过哪些Vue的性能优化</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、v<span class="token operator">-</span><span class="token keyword">if</span>和v<span class="token operator">-</span><span class="token keyword">for</span>不能连用<span class="token number">2</span>、页面采用keep<span class="token operator">-</span>alive缓存组件<span class="token number">3</span>、合理使用v<span class="token operator">-</span><span class="token keyword">if</span>和v<span class="token operator">-</span>show<span class="token number">4</span>、key保证唯一<span class="token number">5</span>、使用路由懒加载、异步组件、组件封装<span class="token number">6</span>、防抖、节流<span class="token number">7</span>、第三方模块按需导入<span class="token number">8</span>、图片懒加载<span class="token number">9</span>、精灵图的使用<span class="token number">10</span>、代码压缩<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vue-router-路由有哪些模式"><a href="#Vue-router-路由有哪些模式" class="headerlink" title="Vue-router 路由有哪些模式"></a>Vue-router 路由有哪些模式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">  hash 模式和history 模式<span class="token number">1</span>、hash 模式：后面的 hash 值的变化，浏览器既不会向服务器发出请求，浏览器也不会刷新，每次 hash 值的变化会触发 hashchange 事件。<span class="token number">2</span>、history 模式：利用了 <span class="token constant">HTML5</span> 中新增的 <span class="token function">pushState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 和 <span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法。这两个方法应用于浏览器的历史记录栈，在当前已有的 back、forward、go 的基础之上，它们提供了对历史记录进行修改的功能。只是当它们执行修改时，虽然改变了当前的 <span class="token constant">URL</span>，但浏览器不会立即向后端发送请求。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Vuex-是什么？有哪几种属性？"><a href="#Vuex-是什么？有哪几种属性？" class="headerlink" title="Vuex 是什么？有哪几种属性？"></a>Vuex 是什么？有哪几种属性？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、Vuex 是专为Vue设计的状态管理工具，采用集中式储存管理 Vue 中所有组件的状态。<span class="token number">2</span>、属性（<span class="token number">1</span>）state属性：基本数据（<span class="token number">2</span>）getters属性：从 state 中派生出的数据（<span class="token number">3</span>）mutation属性：更新 store 中数据的唯一途径，其接收一个以 state 为第一参数的回调函数（<span class="token number">4</span>）action 属性：提交 mutation 以更改 state，其中可以包含异步操作，数据请求（<span class="token number">5</span>）module 属性：用于将 store分割成不同的模块。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="axios封装请求拦截器和响应拦截器"><a href="#axios封装请求拦截器和响应拦截器" class="headerlink" title="axios封装请求拦截器和响应拦截器"></a>axios封装请求拦截器和响应拦截器</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">interceptors：【ɪntərˈsɛptərz】<span class="token number">1</span>、项目中会在utils文件中，封装一个request<span class="token punctuation">.</span>js文件<span class="token number">2</span>、通过axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span>配置baseURL，并得到一个request实例<span class="token number">3</span>、通过request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span>use来配置请求拦截<span class="token number">4</span>、通过request<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span>use来配置响应拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue怎么实现强制刷新组件"><a href="#vue怎么实现强制刷新组件" class="headerlink" title="vue怎么实现强制刷新组件"></a>vue怎么实现强制刷新组件</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第一<span class="token punctuation">.</span>使用<span class="token keyword">this</span><span class="token punctuation">.</span>$forceUpdate强制重新渲染    <span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reload()"</span><span class="token operator">></span>刷新当前组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'comp'</span><span class="token punctuation">,</span>  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>     <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span> 第二<span class="token punctuation">.</span>使用v<span class="token operator">-</span><span class="token keyword">if</span>指令 <span class="token operator">&lt;</span>template<span class="token operator">></span>     <span class="token operator">&lt;</span>comp v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"update"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>comp<span class="token operator">></span>      <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"reload()"</span><span class="token operator">></span>刷新comp组件<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span> <span class="token operator">&lt;</span>script<span class="token operator">></span>  <span class="token keyword">import</span> comp <span class="token keyword">from</span> <span class="token string">'@/views/comp.vue'</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'parentComp'</span><span class="token punctuation">,</span>     <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">update</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>     <span class="token function">reload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 移除组件  this.update = false            </span>    <span class="token comment">// 在组件移除后，重新渲染组件   // this.$nextTick可实现在DOM 状态更新后，执行传入的方法。           </span>    <span class="token comment">// this.$nextTick(() => &#123;    this.update = true  &#125;)  &#125;  &#125;&#125;</span>  <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在使用计算属性的时-函数名和data数据源中的数据可以同名吗"><a href="#在使用计算属性的时-函数名和data数据源中的数据可以同名吗" class="headerlink" title="在使用计算属性的时,函数名和data数据源中的数据可以同名吗?"></a>在使用计算属性的时,函数名和data数据源中的数据可以同名吗?</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">不可以在初始化vm的过程，因为不管是计算属性还是data还是props 都会被挂载在vm实例上，会把data覆盖了<span class="token punctuation">,</span>因此 这三个都不能同名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="vue中data的属性可以和methods中的方法同名吗"><a href="#vue中data的属性可以和methods中的方法同名吗" class="headerlink" title="vue中data的属性可以和methods中的方法同名吗?"></a>vue中data的属性可以和methods中的方法同名吗?</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">不可以vue源码中的 <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法会取出 methods 中的方法进行判断，如果有重复的就会报错<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="你知道style加scoped属性的用途和原理吗"><a href="#你知道style加scoped属性的用途和原理吗" class="headerlink" title="你知道style加scoped属性的用途和原理吗"></a>你知道style加scoped属性的用途和原理吗</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">用途：防止全局同名<span class="token constant">CSS</span>污染原理：在标签加上v<span class="token operator">-</span>data<span class="token operator">-</span>something属性，再在选择器时加上对应<span class="token punctuation">[</span>v<span class="token operator">-</span>data<span class="token operator">-</span>something<span class="token punctuation">]</span>，即<span class="token constant">CSS</span>带属性选择器，以此完成类似作用域的选择方式<span class="token punctuation">.</span>scoped会在元素上添加唯一的属性（data<span class="token operator">-</span>v<span class="token operator">-</span>x形式），css编译后也会加上属性选择器，从而达到限制作用域的目的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何在子组件中访问父组件的实例"><a href="#如何在子组件中访问父组件的实例" class="headerlink" title="如何在子组件中访问父组件的实例"></a>如何在子组件中访问父组件的实例</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Vue中子组件调用父组件的方法，这里有三种方法提供参考：  <span class="token number">1</span>：直接在子组件中通过<span class="token keyword">this</span><span class="token punctuation">.</span>$parent<span class="token punctuation">.</span>event来调用父组件的方法  <span class="token number">2</span>：在子组件里用$emit向父组件触发一个事件，父组件监听这个事件  <span class="token number">3</span>：父组件把方法传入子组件中，在子组件里直接调用这个方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="watch的属性用箭头函数定义结果会怎么样"><a href="#watch的属性用箭头函数定义结果会怎么样" class="headerlink" title="watch的属性用箭头函数定义结果会怎么样"></a>watch的属性用箭头函数定义结果会怎么样</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">不应该使用箭头函数来定义 watch <span class="token operator">:</span>例如：    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token function-variable function">a</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token comment">//  这里不应该用箭头函数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sum <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>。理由是箭头函数绑定了父级作用域的上下文，所以 <span class="token keyword">this</span> 将不会按照期望指向 Vue 实例，<span class="token keyword">this</span><span class="token punctuation">.</span>a 将是 <span class="token keyword">undefined</span>。注意：methods里面定义的方法也不要用箭头函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么解决vue打包后静态资源图片失效的问题"><a href="#怎么解决vue打包后静态资源图片失效的问题" class="headerlink" title="怎么解决vue打包后静态资源图片失效的问题"></a>怎么解决vue打包后静态资源图片失效的问题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">在vue<span class="token operator">-</span>cli 需要在根目录下建一个vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>js 在里面配置publicPath即可默认值为<span class="token operator">/</span>，更改为<span class="token punctuation">.</span><span class="token operator">/</span>就好了<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="怎么解决vue动态设置img的src不生效的问题"><a href="#怎么解决vue动态设置img的src不生效的问题" class="headerlink" title="怎么解决vue动态设置img的src不生效的问题"></a>怎么解决vue动态设置img的src不生效的问题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">因为动态添加src被当做静态资源处理了，没有进行编译，所以要加上require。<span class="token operator">&lt;</span>img <span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"require('@/assets/images/xxx.png')"</span> <span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢"><a href="#EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢" class="headerlink" title="EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢"></a>EventBus注册在全局上时，路由切换时会重复触发事件，如何解决呢</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">原因：因为我们的事件是全局的，它并不会随着组件的销毁而自动注销，需要我们手动调用注销方法来注销。解决：我们可以在组件的 beforeDestroy <span class="token punctuation">,</span>或 destroy 生命周期中执行注销方法，手动注销事件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="你认为vue的核心是什么"><a href="#你认为vue的核心是什么" class="headerlink" title="你认为vue的核心是什么"></a>你认为vue的核心是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">组件化双向数据绑定<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="在-vue文件中style是必须的吗？那script是必须的吗"><a href="#在-vue文件中style是必须的吗？那script是必须的吗" class="headerlink" title="在.vue文件中style是必须的吗？那script是必须的吗"></a>在.vue文件中style是必须的吗？那script是必须的吗</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">在<span class="token punctuation">.</span>vue 文件中，template是必须的，而script与style都不是必须的。都没有的话那就是一个静态网页<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="说说vue的优缺点"><a href="#说说vue的优缺点" class="headerlink" title="说说vue的优缺点"></a>说说vue的优缺点</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">优点：    <span class="token number">1.</span>数据驱动    <span class="token number">2.</span>组件化    <span class="token number">3.</span>轻量级    <span class="token number">4.</span><span class="token constant">SPA</span><span class="token punctuation">(</span>单页面<span class="token punctuation">)</span>    <span class="token number">5.</span>版本<span class="token number">3.0</span>的界面化管理工具比较好使    <span class="token number">6</span><span class="token punctuation">.</span>vue易入门    <span class="token number">7.</span>中文社区强大，入门简单，提升也有很多的参考资料。缺点：    <span class="token number">1.</span>不支持<span class="token constant">IE8</span>及以下浏览器    <span class="token number">2.</span>吃内存（每个组件都会实例化一个Vue实例，实例的属性和方法很多）    <span class="token number">3.</span>定义在data里面的对象，实例化时，都会递归的遍历转成响应式数据，    然而有的响应式数据我们并不会用到，造成性能上的浪费<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="库和框架的区别"><a href="#库和框架的区别" class="headerlink" title="库和框架的区别"></a>库和框架的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">库 本质上是一个函数的集合，每一次调用函数，实现一个特定的功能，使用库的时候，   把库当成工具使用，需要自己控制代码的执行逻辑。框架 是一套完整的解决方案，使用框架的时候，框架实现了大部分的功能，     我们只需要按照框架的规则书写代码即可，使用框架开发比库开发效率更高，更容易维护。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="MVC-和-MVVM-的区别"><a href="#MVC-和-MVVM-的区别" class="headerlink" title="MVC 和 MVVM 的区别"></a>MVC 和 MVVM 的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">MVVM</span><span class="token constant">M</span> Model 模型 指的是数据层<span class="token constant">V</span> View  视图 指的是用户页面<span class="token constant">VM</span> ViewModel 视图模型视图模型是<span class="token constant">MVVM</span>模式的核心，它是连接view和model的桥梁，<span class="token constant">MVVM</span>实现了view和model的自动同步，当model的属性改变时，我们不用自手动操作<span class="token constant">DOM</span>元素，来改变view的显示，称之为数据的双向绑定。<span class="token constant">MVC</span><span class="token constant">M</span> Model 模型 指的是数据层<span class="token constant">V</span> View  视图 指的是用户页面<span class="token constant">C</span> controller 控制器 指的是页面业务逻辑view传送指令到controller，controller完成业务逻辑后，要求model改变状态，model将新的数据发送给view，用户得到反馈。所 信都是单向的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自己实现一个-v-model-的效果"><a href="#自己实现一个-v-model-的效果" class="headerlink" title="自己实现一个 v-model 的效果"></a>自己实现一个 v-model 的效果</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>         <span class="token comment">// vue2.0</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello vue'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">.</span>msg    input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      data<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">let</span> temp <span class="token operator">=</span> data<span class="token punctuation">.</span>msg    Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">'msg'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> temp      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span>value <span class="token operator">=</span> value        <span class="token keyword">return</span> <span class="token punctuation">(</span>temp <span class="token operator">=</span> value<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">// vue3.0</span>    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'hello vue'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">let</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">)</span>    input<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">.</span>msg    input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'input'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>value    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value        input<span class="token punctuation">.</span>value <span class="token operator">=</span> value      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>   <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Object-defineProperty和proxy的区别"><a href="#Object-defineProperty和proxy的区别" class="headerlink" title="Object.defineProperty和proxy的区别"></a>Object.defineProperty和proxy的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、Object<span class="token punctuation">.</span>defineProperty  用于监听对象的数据变化缺点：    <span class="token number">1</span>）无法监听数组变化    <span class="token number">2</span>）只能劫持对象的属性<span class="token punctuation">,</span>属性值也是对象那么需要深度遍历<span class="token number">2</span>、proxy  可以理解为 在被劫持的对象之前 加了一层拦截   proxy返回的是一个新对象， 可以通过操作返回的新的对象达到目的总结：当使用 defineProperty 时，我们修改原来的 obj 对象就可以触发拦截而使用 proxy，就必须修改代理对象，即 Proxy 的实例才可以触发拦截<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-中怎么操作-dom"><a href="#vue-中怎么操作-dom" class="headerlink" title="vue 中怎么操作 dom"></a>vue 中怎么操作 dom</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> 要在mounted中使用，在执行mounted的时候，vue已经渲染了dom节点，可以获取dom节点。    方法：      <span class="token number">1</span>）在标签中添加ref<span class="token operator">=</span><span class="token string">"name"</span>      <span class="token number">2</span>）在方法中用<span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>name拿到这个元素，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导航钩子有几种（导航守卫）具体怎么用的"><a href="#导航钩子有几种（导航守卫）具体怎么用的" class="headerlink" title="导航钩子有几种（导航守卫）具体怎么用的"></a>导航钩子有几种（导航守卫）具体怎么用的</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> 分类：    <span class="token number">1</span>、全局守卫： router<span class="token punctuation">.</span>beforeEach    <span class="token number">2</span>、全局解析守卫： router<span class="token punctuation">.</span>beforeResolve    <span class="token number">3</span>、全局后置钩子： router<span class="token punctuation">.</span>afterEach    <span class="token number">4</span>、路由独享的守卫： beforeEnter    <span class="token number">5</span>、组件内的守卫： <span class="token function">beforeRouteEnter、beforeRouteUpdate</span> <span class="token punctuation">(</span><span class="token number">2.2</span> 新增<span class="token punctuation">)</span>、beforeRouteLeave    使用：    <span class="token number">1</span>、全局守卫： router<span class="token punctuation">.</span>beforeEach       <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token operator">...</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>          router<span class="token punctuation">.</span><span class="token function">beforeEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token number">2</span>、全局解析守卫： router<span class="token punctuation">.</span>beforeResolve       可以用 router<span class="token punctuation">.</span>beforeResolve 注册一个全局守卫。这和 router<span class="token punctuation">.</span>beforeEach 类似，区别是：在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用。    <span class="token number">3</span>、全局后置钩子： router<span class="token punctuation">.</span>afterEach       router<span class="token punctuation">.</span><span class="token function">afterEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> <span class="token keyword">from</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          <span class="token comment">// ...</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token number">4</span>、路由独享的守卫： beforeEnter       <span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>          <span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/foo'</span><span class="token punctuation">,</span>              <span class="token literal-property property">component</span><span class="token operator">:</span> Foo<span class="token punctuation">,</span>              <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ...</span>              <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token number">5</span>、组件内的守卫： <span class="token function">beforeRouteEnter、beforeRouteUpdate</span> <span class="token punctuation">(</span><span class="token number">2.2</span> 新增<span class="token punctuation">)</span>、beforeRouteLeave       <span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>          <span class="token literal-property property">template</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>          <span class="token function">beforeRouteEnter</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在渲染该组件的对应路由被 confirm 前调用</span>            <span class="token comment">// 不能获取组件实例 `this`</span>            <span class="token comment">// 因为当守卫执行前，组件实例还没被创建</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function">beforeRouteUpdate</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 在当前路由改变，但是该组件被复用时调用</span>            <span class="token comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span>            <span class="token comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span>            <span class="token comment">// 可以访问组件实例 `this`</span>          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>          <span class="token function">beforeRouteLeave</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 导航离开该组件的对应路由时调用</span>            <span class="token comment">// 可以访问组件实例 `this`</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是promise，特点是什么"><a href="#什么是promise，特点是什么" class="headerlink" title="什么是promise，特点是什么"></a>什么是promise，特点是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">首先，它是一个对象，也就是说与其他JavaScript对象的用法，没有什么两样；其次，它起到代理作用（proxy），充当异步操作与回调函数之间的中介。它使得异步操作具备同步操作的效果，使得程序具备正常的同步运行的流程，回调函数不必再一层层嵌套。简单说，它的思想是，每一个异步任务立刻返回一个Promise对象，由于是立刻返回，所以可以采用同步操作的流程。这个Promises对象有一个then方法，允许指定回调函数，在异步任务完成后调用。特点：   <span class="token number">1</span>、Promise对象只有三种状态。       异步操作“未完成”（pending）       异步操作“已完成”（resolved，又称fulfilled）       异步操作“失败”（rejected）       异步操作成功，Promise对象传回一个值，状态变为resolved。       异步操作失败，Promise对象抛出一个错误，状态变为rejected。   <span class="token number">2</span>、promise的回调是同步的，then是异步的   <span class="token number">3</span>、可以链式调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="promise的方法有哪些，能说明其作用"><a href="#promise的方法有哪些，能说明其作用" class="headerlink" title="promise的方法有哪些，能说明其作用"></a>promise的方法有哪些，能说明其作用</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">原型上的方法：<span class="token number">1</span>、Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span>）作用是为 Promise 实例添加状态改变时的回调函数。接受两个回调函数作为参数。第一个回调函数是Promise对象的状态变为resolved时调用，第二个回调函数是Promise对象的状态变为rejected时调用。其中，第二个函数是可选的，不一定要提供。    <span class="token number">2</span>）返回的是另一个Promise对象，后面还可以接着调用then方法。<span class="token number">2</span>、Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span>）用于指定发生错误时的回调函数。    <span class="token number">2</span>）返回的也是一个 Promise 对象，因此还可以接着调用then方法<span class="token number">3</span>、Promise<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span>）finally方法用于指定不管 Promise 对象最后状态如何，都会执行的回调函数。    <span class="token number">2</span>）finally方法的回调函数不接受任何参数，这意味着没有办法知道，前面的 Promise 状态到底是fulfilled还是rejected。自身<span class="token constant">API</span><span class="token operator">:</span><span class="token number">1</span>、Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span>）不带参数传递 — 返回一个新的状态为resolve的promise对象    <span class="token number">2</span>）参数是一个 Promise 实例— 返回 当前的promise实例<span class="token number">2</span>、Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">)</span>返回的是一个值    <span class="token number">2</span>）返回的值会传递到下一个then的resolve方法参数中<span class="token number">3</span>、Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token number">1</span>）并行执行异步操作的能力    <span class="token number">2</span>）所有异步操作执行完后才执行回调<span class="token number">4</span>、Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token number">1</span>）那个结果返回来的快就是，那个结果，不管结果是成功还是失败<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="async和await是干什么的"><a href="#async和await是干什么的" class="headerlink" title="async和await是干什么的"></a>async和await是干什么的</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token keyword">async</span>和<span class="token keyword">await</span>可以说是异步终极解决方案了。<span class="token number">1</span>、<span class="token keyword">async</span> 用于申明一个 <span class="token keyword">function</span> 是异步的，而 <span class="token keyword">await</span> 用于等待一个异步方法执行完成。<span class="token number">2</span>、<span class="token keyword">await</span> 只能出现在 <span class="token keyword">async</span> 函数中。<span class="token number">3</span>、<span class="token keyword">async</span> 函数返回的是一个 Promise 对象，后面可以用then方法。缺点：因为<span class="token keyword">await</span>将异步代码改造成了同步代码，如果多个异步代码都使用了<span class="token keyword">await</span>会导致性能上的降低。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是宏任务和微任务，执行顺序是什么"><a href="#什么是宏任务和微任务，执行顺序是什么" class="headerlink" title="什么是宏任务和微任务，执行顺序是什么"></a>什么是宏任务和微任务，执行顺序是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、宏任务一般是：包括整体代码script，setTimeout，setInterval。<span class="token number">2</span><span class="token function">、微任务：Promise</span><span class="token punctuation">(</span>then、catch、finally<span class="token punctuation">)</span>，process<span class="token punctuation">.</span>nextTick（node<span class="token punctuation">.</span>js）。<span class="token number">3</span>、先执行主代码块，然后执行微任务，最后在执行宏任务（异步）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记(ajax篇)</title>
      <link href="/wly/2022/02/07/qian-duan-bi-ji-ajax-pian/"/>
      <url>/wly/2022/02/07/qian-duan-bi-ji-ajax-pian/</url>
      
        <content type="html"><![CDATA[<h1 id="ajax笔记总结"><a href="#ajax笔记总结" class="headerlink" title="ajax笔记总结"></a>ajax笔记总结</h1><h2 id="什么是事件流"><a href="#什么是事件流" class="headerlink" title="什么是事件流"></a>什么是事件流</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> 事件流是指事件传播的顺序<span class="token punctuation">,</span><span class="token parameter">由事件捕获</span> <span class="token operator">=></span> <span class="token parameter">目标事件</span> <span class="token operator">=></span> 事件冒泡<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="如何阻止冒泡和默认行为"><a href="#如何阻止冒泡和默认行为" class="headerlink" title="如何阻止冒泡和默认行为"></a>如何阻止冒泡和默认行为</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> 阻止冒泡和捕获  e<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    阻止默认行为   e<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token keyword">return</span> <span class="token boolean">false</span>    注意：addEventListener注册的事件，在高浏览器版本中，    <span class="token keyword">return</span> <span class="token boolean">false</span>将没有效果，必须要用事件对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原生注册事件的方式有哪些？区别是什么"><a href="#原生注册事件的方式有哪些？区别是什么" class="headerlink" title="原生注册事件的方式有哪些？区别是什么"></a>原生注册事件的方式有哪些？区别是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">注册方式<span class="token number">1.</span> on <span class="token operator">+</span> 事件名称<span class="token number">2.</span> addEventListener<span class="token literal-property property">区别</span><span class="token operator">:</span> <span class="token number">1.</span> 使用on注册事件<span class="token punctuation">,</span>同一个元素只能注册一个同类型事件<span class="token punctuation">,</span>否则会覆盖。<span class="token number">2.</span> addEventListener可以注册同一事件多次<span class="token punctuation">,</span>不会被覆盖。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="http和https的区别"><a href="#http和https的区别" class="headerlink" title="http和https的区别"></a>http和https的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span><span class="token punctuation">.</span>https协议需要到<span class="token constant">CA</span>申请证书，一般免费证书较少，因而需要一定费用。<span class="token number">2</span><span class="token punctuation">.</span>http是超文本传输协议，信息是明文传输，https则是具有安全性的ssl<span class="token operator">/</span>tls加密传输协议。<span class="token number">3</span><span class="token punctuation">.</span>http和https使用的是完全不同的连接方式，用的端口也不一样，前者是<span class="token number">80</span>，后者是<span class="token number">443</span>。<span class="token number">4</span><span class="token punctuation">.</span>http的连接很简单，是无状态的；<span class="token constant">HTTPS</span>协议是由<span class="token constant">SSL</span><span class="token operator">/</span><span class="token constant">TLS</span><span class="token operator">+</span><span class="token constant">HTTP</span>协议构建的可进行加密传输、身份认证的网络协议，比http协议安全。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="get-和post的区别"><a href="#get-和post的区别" class="headerlink" title="get 和post的区别"></a>get 和post的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">get</span><span class="token number">1.</span> 在url后面拼接参数<span class="token punctuation">,</span>只能以文本的形式传递数据<span class="token number">2.</span> 传递的数据量小<span class="token punctuation">,</span>4KB左右<span class="token number">3.</span> 安全性低<span class="token punctuation">,</span> 会将数据显示在地址栏<span class="token number">4.</span> 速度快<span class="token punctuation">,</span>通常用于安全性要求不高的请求<span class="token number">5.</span> 会缓存数据post<span class="token number">1.</span> 安全性比较高<span class="token number">2.</span> 传递数据量大<span class="token punctuation">,</span>请求对数据长度没有要求<span class="token number">3.</span> 请求不会被缓存<span class="token punctuation">,</span>也不会保留在浏览器历史记录里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="项目中常遇到的状态码有哪些"><a href="#项目中常遇到的状态码有哪些" class="headerlink" title="项目中常遇到的状态码有哪些"></a>项目中常遇到的状态码有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">200</span>  请求成功<span class="token punctuation">,</span>  <span class="token number">2</span>开头的异步表示请求成功<span class="token number">304</span>  请求被允许<span class="token punctuation">,</span>但请求内容没有改变<span class="token punctuation">,</span> <span class="token number">3</span>开头的一般请求完成<span class="token number">400</span>  请求格式错误<span class="token punctuation">,</span>  <span class="token number">4</span>开头的一般表示请求错误<span class="token number">404</span>  <span class="token function">请求的资源</span><span class="token punctuation">(</span>网页<span class="token punctuation">)</span>不存在<span class="token punctuation">,</span>  <span class="token number">500</span>  内部服务器错误<span class="token punctuation">,</span>  <span class="token number">5</span>开头的一般都是指服务器错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="jsonp的原理？以及优缺点"><a href="#jsonp的原理？以及优缺点" class="headerlink" title="jsonp的原理？以及优缺点"></a>jsonp的原理？以及优缺点</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">原理</span><span class="token operator">:</span> 利用script标签的src属性具有天然可跨域的特性，由服务端返回一个预先定义好的Javascript函数的调用，并且将服务器数据以该函数参数的形式响应给浏览器<span class="token punctuation">.</span><span class="token literal-property property">优点</span><span class="token operator">:</span> 完美解决在测试或者开发中获取不同域下的数据<span class="token punctuation">,</span>用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住<span class="token constant">JSON</span>数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。缺点：Jsonp只支持<span class="token keyword">get</span>请求而不支持post 请求<span class="token punctuation">,</span>也即是说如果想传给后台一个json 格式的数据<span class="token punctuation">,</span>此时问题就来了<span class="token punctuation">,</span> 浏览器会报一个http状态码<span class="token number">41</span>错误<span class="token punctuation">,</span>告诉你请求格式不正确<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Json字符串和json对象怎么相互转换"><a href="#Json字符串和json对象怎么相互转换" class="headerlink" title="Json字符串和json对象怎么相互转换"></a>Json字符串和json对象怎么相互转换</h2><pre class="line-numbers language-none"><code class="language-none">答: JSON对象转JSON字符串: json.stringify(对象)    JSON字符串转JSON对象: json.parse(字符串)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="什么是同源策略？怎么解决跨域问题"><a href="#什么是同源策略？怎么解决跨域问题" class="headerlink" title="什么是同源策略？怎么解决跨域问题"></a>什么是同源策略？怎么解决跨域问题</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">同源策略</span><span class="token operator">:</span> 同源策略是浏览器的一种安全策略<span class="token punctuation">,</span> 所谓同源是指域名、协议、端口完全相同，不同源则跨域。<span class="token literal-property property">解决跨域的方法</span><span class="token operator">:</span> <span class="token number">1.</span> 通过jsonp跨域<span class="token number">2.</span> 跨域资源共享（<span class="token constant">CORS</span>  Access<span class="token operator">-</span>Control<span class="token operator">-</span>Allow<span class="token operator">-</span>Origin<span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>api<span class="token punctuation">.</span>bob<span class="token punctuation">.</span>com）<span class="token number">3.</span> nginx代理跨域<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解同步和异步"><a href="#怎么理解同步和异步" class="headerlink" title="怎么理解同步和异步"></a>怎么理解同步和异步</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、javascript是单线程。单线程就意味着，所有任务需要排队，前一个任务结束，才会执行后一个任务。如果前一个任务耗时很长，后一个任务就不得不一直等着。于是就有一个概念——任务队列。<span class="token number">2</span>、所有任务可以分成两种，一种是同步任务（synchronous），另一种是异步任务（asynchronous）。同步任务指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务；异步任务指的是，不进入主线程、而进入<span class="token string">"任务队列"</span>（task queue）的任务，只有等主线程任务执行完毕，<span class="token string">"任务队列"</span>开始通知主线程，请求执行任务，该任务才会进入主线程执行。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="你对WebSocket了解哪些"><a href="#你对WebSocket了解哪些" class="headerlink" title="你对WebSocket了解哪些"></a>你对WebSocket了解哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">WebSocket 是<span class="token constant">HTML5</span>一种新的协议。它实现了浏览器与服务器全双工通信，能更好的节省服务器资源和带宽并达到实时通讯，它建立在<span class="token constant">TCP</span>之上，同<span class="token constant">HTTP</span>一样通过<span class="token constant">TCP</span>来传输数据，但是它和<span class="token constant">HTTP</span>最大不同是：<span class="token number">1.</span> WebSocket是一种双向通信协议，在建立连接后，WebSocket服务器和Browser<span class="token operator">/</span>Client Agent都能主动的向对方发送或接收数据，就像Socket一样；<span class="token number">2.</span> WebSocket需要类似<span class="token constant">TCP</span>的客户端和服务器端通过握手连接连接成功后才能相互通信。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="在地址栏输入网址，到数据返回的过程是什么？"><a href="#在地址栏输入网址，到数据返回的过程是什么？" class="headerlink" title="在地址栏输入网址，到数据返回的过程是什么？"></a>在地址栏输入网址，到数据返回的过程是什么？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span>  <span class="token number">1.</span> 输入url地址后，首先进行<span class="token constant">DNS</span>解析，将相应的域名解析为<span class="token constant">IP</span>地址。     <span class="token number">2.</span> 根据<span class="token constant">IP</span>地址去寻找相应的服务器。     <span class="token number">3.</span> 与服务器进行<span class="token constant">TCP</span>的三次握手，建立连接。     <span class="token number">4.</span> 客户端发送请求，找到相应的资源库。     <span class="token number">5.</span> 客户端拿到数据，进行相应的渲染。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="原生-ajax-请求的步骤"><a href="#原生-ajax-请求的步骤" class="headerlink" title="原生 ajax 请求的步骤"></a>原生 ajax 请求的步骤</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">答：<span class="token number">1.</span>创建异步对象 <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">2.</span>设置请求行  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token number">3.</span>设置请求头  xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">get</span>请求没有请求头     post请求多一个关键头信息    Content<span class="token operator">-</span>type<span class="token operator">:</span> application<span class="token operator">/</span>x<span class="token operator">-</span>www<span class="token operator">-</span>form<span class="token operator">-</span>urlencoded     <span class="token number">4.</span>设置请求体  xhr<span class="token punctuation">.</span>send      <span class="token keyword">get</span>请求没有请求体<span class="token punctuation">,</span>参数为<span class="token keyword">null</span>    <span class="token number">5.</span>监视异步对象的状态变化   xhr<span class="token punctuation">.</span><span class="token function">onreadystatechange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解三次握手"><a href="#怎么理解三次握手" class="headerlink" title="怎么理解三次握手"></a>怎么理解三次握手</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">字段      含义<span class="token constant">URG</span>   紧急指针是否有效。为<span class="token number">1</span>，表示某一位需要被优先处理<span class="token constant">ACK</span>   确认号是否有效，一般置为<span class="token number">1</span>。<span class="token constant">PSH</span>   提示接收端应用程序立即从<span class="token constant">TCP</span>缓冲区把数据读走。<span class="token constant">RST</span>   对方要求重新建立连接，复位。<span class="token constant">SYN</span>   请求建立连接，并在其序列号的字段进行序列号的初始值设定。建立连接，设置为<span class="token number">1</span><span class="token constant">FIN</span>    希望断开连接。三次握手    第一次握手：建立连接时，客户端发送syn包到服务器，等待服务器确认。    第二次握手：服务器收到syn包，必须确认客户的<span class="token constant">SYN</span>，同时自己也发送一个<span class="token constant">SYN</span>包（syn<span class="token operator">=</span>y）到客户端    第三次握手：客户端收到服务器的<span class="token constant">SYN</span><span class="token operator">+</span><span class="token constant">ACK</span>包，向服务器发送确认包<span class="token constant">ACK</span>，此包发送完毕，    客户端和服务器进入（<span class="token constant">TCP</span>连接成功）状态，完成三次握手   （通俗：主机<span class="token number">1</span>告诉主机<span class="token number">2</span>，我可以向你请求数据吗。主机<span class="token number">2</span>告诉主机<span class="token number">1</span>，可以请求数据。   主机<span class="token number">1</span>告诉主机<span class="token number">2</span>，那我来请求数据了，请求完成，实现三次握手）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解四次挥手"><a href="#怎么理解四次挥手" class="headerlink" title="怎么理解四次挥手"></a>怎么理解四次挥手</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">第一次分手：主机<span class="token number">1</span>（可以使客户端，也可以是服务器端）向主机<span class="token number">2</span>发送一个<span class="token constant">FIN</span>报文段；此时，主机<span class="token number">1</span>进入<span class="token constant">FIN_WAIT_1</span>状态；这表示主机<span class="token number">1</span>没有数据要发送给主机<span class="token number">2</span>了。第二次分手：主机<span class="token number">2</span>收到了主机<span class="token number">1</span>发送的<span class="token constant">FIN</span>报文段，向主机<span class="token number">1</span>回一个<span class="token constant">ACK</span>报文段，主机<span class="token number">1</span>进入<span class="token constant">FIN_WAIT_2</span>状态；主机<span class="token number">2</span>告诉主机<span class="token number">1</span>，我“同意”你的关闭请求。第三次分手：主机<span class="token number">2</span>向主机<span class="token number">1</span>发送<span class="token constant">FIN</span>报文段，请求关闭连接，同时主机<span class="token number">2</span>进入<span class="token constant">LAST_ACK</span>状态。第四次分手：主机<span class="token number">1</span>收到主机<span class="token number">2</span>发送的<span class="token constant">FIN</span>报文段，向主机<span class="token number">2</span>发送<span class="token constant">ACK</span>报文段，然后主机<span class="token number">1</span>进入<span class="token constant">TIME_WAIT</span>状态；主机<span class="token number">2</span>收到主机<span class="token number">1</span>的<span class="token constant">ACK</span>报文段以后，就关闭连接；此时，主机<span class="token number">1</span>等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机<span class="token number">1</span>也可以关闭连接了。（通俗：主机<span class="token number">1</span>告诉主机<span class="token number">2</span>，我没有数据要发送了，希望断开连接。主机<span class="token number">2</span>接到请求后说，同意断开。主机<span class="token number">2</span>告诉主机<span class="token number">1</span>可以关闭连接了。主机<span class="token number">1</span>接到可以关闭的指令后，关闭连接，四次挥手完成）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端笔记(js篇)</title>
      <link href="/wly/2022/01/23/qian-duan-bi-ji/"/>
      <url>/wly/2022/01/23/qian-duan-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="js笔记总结"><a href="#js笔记总结" class="headerlink" title="js笔记总结"></a>js笔记总结</h1><h2 id="盒子塌陷的原因？解决方式"><a href="#盒子塌陷的原因？解决方式" class="headerlink" title="盒子塌陷的原因？解决方式"></a>盒子塌陷的原因？解决方式</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">原因</span><span class="token operator">:</span> <span class="token number">1.</span> 浮动导致的塌陷<span class="token punctuation">,</span>浮动会脱落标准流<span class="token number">2.</span> 嵌套的两个盒子<span class="token punctuation">,</span>子盒子设置margin<span class="token operator">-</span>top会导致父盒子一下下移<span class="token literal-property property">解决方法</span><span class="token operator">:</span>第一种情况 <span class="token number">1</span> 清除浮动<span class="token punctuation">;</span>  <span class="token number">2</span> 给父盒子加高度<span class="token punctuation">;</span>  <span class="token number">3</span> <span class="token literal-property property">给父元素添加overflow</span><span class="token operator">:</span>hidden第二种情况 <span class="token number">1</span> 给父元素加上边框<span class="token punctuation">;</span> <span class="token number">2</span> <span class="token literal-property property">给父元素添加overflow</span><span class="token operator">:</span>hidden<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不定宽高的div水平垂直居中"><a href="#不定宽高的div水平垂直居中" class="headerlink" title="不定宽高的div水平垂直居中"></a>不定宽高的div水平垂直居中</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"> <span class="token number">1</span>、使用定位和translate来实现       div <span class="token punctuation">&#123;</span>          <span class="token literal-property property">position</span><span class="token operator">:</span>absolute<span class="token punctuation">;</span>          <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>          <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">;</span>          <span class="token literal-property property">transform</span><span class="token operator">:</span> <span class="token function">translate</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">50</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token number">2</span>、使用flex来实现       div <span class="token punctuation">&#123;</span>          <span class="token literal-property property">display</span><span class="token operator">:</span> flex<span class="token punctuation">;</span>          justify<span class="token operator">-</span>content<span class="token operator">:</span>center<span class="token punctuation">;</span> <span class="token comment">//子元素水平居中</span>          align<span class="token operator">-</span>items<span class="token operator">:</span>center<span class="token punctuation">;</span> <span class="token comment">//子元素垂直居中</span>        <span class="token punctuation">&#125;</span>   <span class="token number">3</span>、使用定位和margin来实现       #box <span class="token punctuation">&#123;</span>           <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>           <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>           <span class="token literal-property property">position</span><span class="token operator">:</span> relative<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       #content <span class="token punctuation">&#123;</span>           <span class="token literal-property property">width</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>           <span class="token literal-property property">height</span><span class="token operator">:</span> 50px<span class="token punctuation">;</span>           <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>           <span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>           <span class="token literal-property property">margin</span><span class="token operator">:</span> auto<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css写一个三角形"><a href="#css写一个三角形" class="headerlink" title="css写一个三角形"></a>css写一个三角形</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> div <span class="token punctuation">&#123;</span>      <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token literal-property property">border</span><span class="token operator">:</span> 20px solid transparent<span class="token punctuation">;</span>      border<span class="token operator">-</span>width<span class="token operator">:</span> 40px 20px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>      border<span class="token operator">-</span>right<span class="token operator">-</span>color<span class="token operator">:</span> #f99<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    给一个盒子宽高设置为<span class="token number">0</span>，再设置<span class="token number">20</span>像素透名色的实线边框，    再设置右边框<span class="token number">20</span>像素，上边框<span class="token number">40</span>像素，再给右边框设置一个颜色<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="css选择器的优先级"><a href="#css选择器的优先级" class="headerlink" title="css选择器的优先级"></a>css选择器的优先级</h2><pre class="line-numbers language-none"><code class="language-none">答: !important&gt;行内样式&gt;id选择器&gt;类&#x2F;属性&#x2F;伪类选择器&gt;伪元素&#x2F;标签选择器&gt;通配符选择器*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="px、em和rem的区别"><a href="#px、em和rem的区别" class="headerlink" title="px、em和rem的区别"></a>px、em和rem的区别</h2><pre class="line-numbers language-none"><code class="language-none">答: px 是固定单位,      em 是相对单位,相当于当前文字的大小,如果没有就找父元素    rem 也是相对单位,相对于html的fontsize的大小<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="rem布局的原理"><a href="#rem布局的原理" class="headerlink" title="rem布局的原理"></a>rem布局的原理</h2><pre class="line-numbers language-none"><code class="language-none">答:rem是css的相对单位，rem缩放是相对根元素字体大小.   rem布局的本质是等比缩放，一般是基于宽度。   rem会配合媒体查询（或js动态获取屏幕宽度）来一起使用，来实现屏幕的适配。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="bfc是什么？"><a href="#bfc是什么？" class="headerlink" title="bfc是什么？"></a>bfc是什么？</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">BFC</span> 全称：Block Formatting Context， 名为 “块级格式化上下文”。简单来说就是，<span class="token constant">BFC</span>是一个完全独立的空间（布局环境），让空间里的子元素不会影响到外面的布局。创建<span class="token constant">BFC</span><span class="token operator">:</span><span class="token literal-property property">float</span><span class="token operator">:</span>right<span class="token operator">/</span>left<span class="token literal-property property">position</span><span class="token operator">:</span>absolute<span class="token operator">/</span>fixed<span class="token literal-property property">display</span><span class="token operator">:</span>inline<span class="token operator">-</span>block<span class="token operator">/</span>table<span class="token operator">-</span>cell<span class="token operator">/</span>flex<span class="token operator">/</span>table<span class="token operator">-</span>caption<span class="token operator">/</span>inline<span class="token operator">-</span>flex<span class="token literal-property property">overflow</span><span class="token operator">:</span>hidden作用：避免margin的重叠，自适应两栏布局（float），<span class="token literal-property property">清除浮动（子元素float，父元素overflow</span><span class="token operator">:</span>hidden）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是重绘和重排"><a href="#什么是重绘和重排" class="headerlink" title="什么是重绘和重排"></a>什么是重绘和重排</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">重排</span><span class="token operator">:</span> 当<span class="token constant">DOM</span>元素影响了元素的几何属性（例如宽和高），浏览器需要重新计算元素的几何属性， 同样其它元素的几何属性也会和位置也会因此受到影响。浏览器会使渲染树中受到影响的部分失效， 并重新构造渲染树。这个过程称为“重排”。<span class="token literal-property property">重绘</span><span class="token operator">:</span> 完成重排后，浏览器会重新绘制受影响的部分到屏幕上中，该过程称为“重绘”。当我们改变<span class="token constant">DOM</span>的大小，增加删除都会导致重排，当给<span class="token constant">DOM</span>元素改变颜色的时候，会导致重绘， 重排一定会重绘，重绘不会重排。重排会影响性能，所以我们尽快能的减少重排的操作<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="flex常用的容器属性"><a href="#flex常用的容器属性" class="headerlink" title="flex常用的容器属性"></a>flex常用的容器属性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> flex<span class="token operator">-</span>direction<span class="token operator">:</span> 设置容器中的主轴方向flex<span class="token operator">-</span>direction<span class="token operator">:</span> rowflex<span class="token operator">-</span>direction<span class="token operator">:</span> column<span class="token number">2.</span> flex<span class="token operator">-</span>wrap<span class="token operator">:</span> 项目在主轴方向上是否换行显示flex<span class="token operator">-</span>wrap<span class="token operator">:</span> nowrapflex<span class="token operator">-</span>wrap<span class="token operator">:</span> wrap<span class="token number">3.</span> justify<span class="token operator">-</span>content<span class="token operator">:</span> 设置容器中的项目在主轴上的对齐方式justify<span class="token operator">-</span>content<span class="token operator">:</span> centerjustify<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>startjustify<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>endjustify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>betweenjustify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>aroundjustify<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>evenly<span class="token number">4.</span> align<span class="token operator">-</span>items<span class="token operator">:</span> 单行项目在侧轴上的排列方式align<span class="token operator">-</span>items<span class="token operator">:</span> centeralign<span class="token operator">-</span>items<span class="token operator">:</span> flex<span class="token operator">-</span>startalign<span class="token operator">-</span>items<span class="token operator">:</span> flex<span class="token operator">-</span>endalign<span class="token operator">-</span>items<span class="token operator">:</span> stretchalign<span class="token operator">-</span>items<span class="token operator">:</span> baseline<span class="token number">5.</span> align<span class="token operator">-</span>content<span class="token operator">:</span> 多行项目侧轴上的对齐方式align<span class="token operator">-</span>content<span class="token operator">:</span> centeralign<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>startalign<span class="token operator">-</span>content<span class="token operator">:</span> flex<span class="token operator">-</span>endalign<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>aroundalign<span class="token operator">-</span>content<span class="token operator">:</span> space<span class="token operator">-</span>betweenalign<span class="token operator">-</span>content<span class="token operator">:</span> stretch<span class="token number">6.</span> flex<span class="token operator">-</span>flow<span class="token operator">:</span> 是flex<span class="token operator">-</span>direction和flex<span class="token operator">-</span>wrap的合写<span class="token punctuation">,</span> 默认值为row nowrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="如何设置比12px更小的字体"><a href="#如何设置比12px更小的字体" class="headerlink" title="如何设置比12px更小的字体"></a>如何设置比12px更小的字体</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">p <span class="token punctuation">&#123;</span>  font<span class="token operator">-</span>size<span class="token operator">:</span>12px<span class="token punctuation">;</span> <span class="token operator">-</span>webkit<span class="token operator">-</span>transform<span class="token operator">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="H5新增了那些特性"><a href="#H5新增了那些特性" class="headerlink" title="H5新增了那些特性"></a>H5新增了那些特性</h2><pre class="line-numbers language-none"><code class="language-none">答: 1. 语义化标签: header nav section article aside footer2. 多媒体标签: video audio3. 表单控件: number search email tel date file time  url4. 本地离线存储 localStorage 长期存储数据,改变浏览器数据不会丢失  sessionStorage 浏览器关闭数据会丢失5. 自定义属性 data-*6. 画布 Canvas7. 拖拽释放 (Drap and Drap) API ondrop8. 新的技术文本 webworker9. 地理位置 (Geolocation) API<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C3新增了那些特性"><a href="#C3新增了那些特性" class="headerlink" title="C3新增了那些特性"></a>C3新增了那些特性</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> 圆角 border<span class="token operator">-</span>radius<span class="token number">2.</span> 盒子模型 box<span class="token operator">-</span>sizing<span class="token number">3.</span> 阴影 box<span class="token operator">-</span>shadow 盒子阴影  text<span class="token operator">-</span>shadow 文字阴影<span class="token number">4.</span> 过渡 transition<span class="token number">5.</span> 2D转换transform  <span class="token function">translate</span><span class="token punctuation">(</span>平移<span class="token punctuation">)</span> <span class="token function">scale</span><span class="token punctuation">(</span>缩放<span class="token punctuation">)</span>  <span class="token function">skew</span><span class="token punctuation">(</span>斜切<span class="token punctuation">)</span> <span class="token function">rotate</span><span class="token punctuation">(</span>旋转<span class="token punctuation">)</span> transform<span class="token operator">-</span>origin 控制转换中心点<span class="token number">6.</span> 3D转换 <span class="token function">perspective</span><span class="token punctuation">(</span>透视距<span class="token punctuation">)</span>  transform<span class="token operator">-</span><span class="token function">style</span><span class="token punctuation">(</span>3D控件效果<span class="token punctuation">)</span><span class="token number">7.</span> 渐变 linear<span class="token operator">-</span>gradient radial<span class="token operator">-</span>gradient<span class="token number">8.</span> 弹性布局 flex<span class="token number">9.</span> 媒体查询 @media screen <span class="token function">and</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token number">10.</span> 边框图片 border<span class="token operator">-</span>image<span class="token number">11.</span> 自定义动画 @keyframes    animation<span class="token number">12.</span> 颜色 新增<span class="token constant">RGBA</span> <span class="token constant">HSLA</span>模式<span class="token number">13.</span> 背景 background<span class="token operator">-</span>size   background<span class="token operator">-</span>origin   background<span class="token operator">-</span>clip<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js的数据类型有哪些"><a href="#js的数据类型有哪些" class="headerlink" title="js的数据类型有哪些"></a>js的数据类型有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">简单数据类型</span><span class="token operator">:</span> number string boolean <span class="token keyword">undefined</span>   <span class="token keyword">null</span><span class="token literal-property property">复制数据类型</span><span class="token operator">:</span> object  <span class="token keyword">function</span>  array<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="怎么判断数据类型"><a href="#怎么判断数据类型" class="headerlink" title="怎么判断数据类型"></a>怎么判断数据类型</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> <span class="token keyword">typeof</span><span class="token function">缺点：</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">typeof</span> <span class="token keyword">null</span>的结果为object，无法分辨是<span class="token keyword">null</span><span class="token function">还是object</span>     <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">typeof</span> 数组 的结果始终为object<span class="token number">2</span><span class="token punctuation">.</span>instanceof<span class="token class-name">3<span class="token punctuation">.</span></span>根据对象的contructor判断<span class="token number">4.</span><span class="token function">通过Object下的toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法来判断最好的基本类型检测方式 <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>它可以区分 <span class="token keyword">null</span> 、 stringboolean 、 number 、 <span class="token keyword">undefined</span> 、 array 、 <span class="token keyword">function</span> 、 object 、 date 、 math 数据类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="typeof返回的数据类型"><a href="#typeof返回的数据类型" class="headerlink" title="typeof返回的数据类型"></a>typeof返回的数据类型</h2><pre class="line-numbers language-none"><code class="language-none">答: number string boolean undefined  object  function    特殊情况：   typeof null --&gt;object   typeof array --&gt;object   typeof string  --&gt;string   typeof number --&gt;number   typeof undefined --&gt;undefined   typeof function --&gt;function   typeof boolean --&gt;boolean   typeof typeof 任何类型  --&gt;string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="返回false的情况有哪些"><a href="#返回false的情况有哪些" class="headerlink" title="返回false的情况有哪些"></a>返回false的情况有哪些</h2><pre class="line-numbers language-none"><code class="language-none">答: 0  &quot;&quot;   null  false  NaN  undefined  不成立的表达式<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对this的理解"><a href="#对this的理解" class="headerlink" title="对this的理解"></a>对this的理解</h2><pre class="line-numbers language-none"><code class="language-none">答: this是个关键字,它的指向和函数的调用方式有关1. 函数调用模式, this指向window2. 构造函数调用模式, this指向新创建的实例对象3. 方法调用模式, this指向调用方法的对象4. 上下文调用模式, call和apply方法中, this指向方法内的第一个参数  bind方法中, bind创建的新函数的this绑定为bind方法中新的函数5. 在事件处理函数中,this指向触发事件的当前元素6. 定时器中,this指向window7. 箭头函数中没有this指向问题,它的this和外层作用域的this保持一致8. 匿名函数中的this总是指向window<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="new操作符做了什么"><a href="#new操作符做了什么" class="headerlink" title="new操作符做了什么"></a>new操作符做了什么</h2><pre class="line-numbers language-none"><code class="language-none">答:  1. 创建一个新对象2. 函数内部的this指向这个对象3. 执行函数体4. 自动返回这个函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="x3D-x3D-和-x3D-x3D-x3D-的区别"><a href="#x3D-x3D-和-x3D-x3D-x3D-的区别" class="headerlink" title="&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别"></a>&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">答：<span class="token operator">==</span> 表示是相等，只比较内容   <span class="token operator">===</span> 表示是全等，不仅比较内容，也比较类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a>null和undefined的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">答：<span class="token keyword">null</span> 表示空值 没有获取到。<span class="token keyword">typeof</span> <span class="token keyword">null</span> 返回<span class="token string">"object"</span>   <span class="token keyword">undefined</span> 表示未定义，声明没有值。<span class="token keyword">typeof</span> <span class="token keyword">undefined</span> 返回<span class="token string">"undefined"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="localStorage、sessionStorage和cookie的区别"><a href="#localStorage、sessionStorage和cookie的区别" class="headerlink" title="localStorage、sessionStorage和cookie的区别"></a>localStorage、sessionStorage和cookie的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">共同点</span><span class="token operator">:</span> 都可以用来存储数据。<span class="token literal-property property">区别</span><span class="token operator">:</span> <span class="token number">1.</span> <span class="token literal-property property">请求不同</span><span class="token operator">:</span> cookie 数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。sessionStorage 和 localStorage不会自动把数据发给服务器，仅在本地保存。<span class="token number">2.</span> <span class="token literal-property property">存储大小限制也不同</span><span class="token operator">:</span> cookie 数据不能超过4k，每次http请求都会携带cookie，cookie只适合保存很小的数据如会话标识。sessionStorage 和 localStorage虽然也有存储大小的限制，sessionStorage和localStorage约5M 。<span class="token number">3.</span> <span class="token literal-property property">数据有效期不同</span><span class="token operator">:</span> sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持； localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="js的运行机制是什么"><a href="#js的运行机制是什么" class="headerlink" title="js的运行机制是什么"></a>js的运行机制是什么</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">js是单线程执行的，页面加载时，会自上而下执行主线程上的同步任务，当主线程代码执行完毕时，才开始执行在任务队列中的异步任务。具体如下  <span class="token number">1.</span>所有同步任务都在主线程上执行，形成一个执行栈。<span class="token number">2.</span>主线程之外，还存在一个<span class="token string">"任务队列(eventloop队列或者消息队列)"</span>。只要异步任务有了运行结果，就在<span class="token string">"任务队列"</span>之中放置一个事件。<span class="token number">3.</span>一旦<span class="token string">"执行栈"</span>中的所有同步任务执行完毕，系统就会读取<span class="token string">"任务队列"</span>，看看里面有哪些事件。哪些对应的异步任务，于是结束等待状态进入执行栈，开始执行。<span class="token number">4.</span>主线程不断重复上面的第三步。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解面向对象"><a href="#怎么理解面向对象" class="headerlink" title="怎么理解面向对象"></a>怎么理解面向对象</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、面向对象是一种软件开发的思想和面向过程是相对应的，就是把程序看作一个对象，将属性和方法封装其中，以提高代码的灵活性、复用性、可扩展性。<span class="token number">2</span>、面向对象有三大特性：封装、继承、多态。 封装：把相关的信息（无论数据或方法）存储在对象中的能力 继承：由另一个类（或多个类）得来类的属性和方法的能力 多态：编写能以多种方法运行的函数或方法的能力<span class="token number">3</span>、js中对象是一个无序的数据集合或者也可以说是属性和方法的集合，可以动态的添加属性可方法。<span class="token number">4</span>、js是基于对象，但是也使用了嵌入了面向对象的思想，可以实现继承和封装，这样也可以提供代码的灵活性和复用性。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="那些情况会得到伪数组"><a href="#那些情况会得到伪数组" class="headerlink" title="那些情况会得到伪数组"></a>那些情况会得到伪数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、参数 arguments，<span class="token number">2</span>、<span class="token constant">DOM</span> 对象列表（比如通过 document<span class="token punctuation">.</span>getElementsByTags 得到的列表）、childNodes也是伪数组<span class="token number">3</span>、jQuery 对象（比如 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="let、const、var的区别"><a href="#let、const、var的区别" class="headerlink" title="let、const、var的区别"></a>let、const、var的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、<span class="token keyword">var</span>声明变量存在提升（提升当前作用域最顶端），<span class="token keyword">let</span>和<span class="token keyword">const</span>是不存在变量提升的情况<span class="token number">2</span>、<span class="token keyword">var</span>没有块级作用，<span class="token keyword">let</span>和<span class="token keyword">const</span>存在块级作用域<span class="token number">3</span>、<span class="token keyword">var</span>允许重复声明，<span class="token keyword">let</span>和<span class="token keyword">const</span>在同一作用域不允许重复声明<span class="token number">4</span>、<span class="token keyword">var</span>和<span class="token keyword">let</span>声明变量可以修改，<span class="token keyword">const</span>是常量不能改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解事件循环机制"><a href="#怎么理解事件循环机制" class="headerlink" title="怎么理解事件循环机制"></a>怎么理解事件循环机制</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、JavaScript 是一门单线程语言<span class="token punctuation">.</span>单线程可能会出现阻塞的情况，所js分了同步任务和异步任务。<span class="token number">2</span>、同步和异步任务分别进入不同的执行环境，同步的进入主线程，即主执行栈，异步的进入 Event Queue（事件队列） 。主线程内的任务执行完毕为空，会去 Event Queue 读取对应的任务，推入主线程执行。 上述过程的不断重复就是我们说的 Event <span class="token function">Loop</span> <span class="token punctuation">(</span>事件循环<span class="token punctuation">)</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是作用域链"><a href="#什么是作用域链" class="headerlink" title="什么是作用域链"></a>什么是作用域链</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、作用域：分全局作用域和局部作用域<span class="token number">2</span>、在访问一个变量时，首先在当前作用域中找，如果找不到再到外层作用域中找，这样一层一层的查找，就形成了作用域链。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="for-in-和-for-of-的区别"><a href="#for-in-和-for-of-的区别" class="headerlink" title="for in 和 for of 的区别"></a>for in 和 for of 的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、<span class="token keyword">for</span>…<span class="token keyword">in</span>是遍历数组、对象的key下标<span class="token number">2</span>、<span class="token keyword">for</span>…<span class="token keyword">of</span>是遍历数组的value属性例如：<span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token number">1</span>）<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">let</span> key <span class="token keyword">in</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//0 1</span>  <span class="token punctuation">&#125;</span>  <span class="token number">2</span>）<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">let</span> value <span class="token keyword">of</span> arr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//a b</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、值类型<span class="token number">1</span>）基本类型数据是值类型    <span class="token number">2</span>）保存与复制的是值本身    <span class="token number">3</span>）使用<span class="token keyword">typeof</span>检测数据的类型<span class="token number">2</span>、引用类型<span class="token number">1</span>）保存与复制的是指向对象的一个指针    <span class="token number">2</span>）使用<span class="token keyword">instanceof</span>检测数据类型    <span class="token number">3</span>）使用 <span class="token keyword">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 方法构造出的对象是引用型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是深拷贝什么是浅拷贝"><a href="#什么是深拷贝什么是浅拷贝" class="headerlink" title="什么是深拷贝什么是浅拷贝"></a>什么是深拷贝什么是浅拷贝</h2><pre class="line-numbers language-none"><code class="language-none">浅拷贝: 拷贝对象的一层属性,如果对象里面还有对象,拷贝的是地址, 两者之间修改会有影响,适用于对象里面属性的值是简单数据类型的.深拷贝: 拷贝对象的多层属性,如果对象里面还有对象,会继续拷贝,使用递归去实现.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="如何实现深拷贝和浅拷贝"><a href="#如何实现深拷贝和浅拷贝" class="headerlink" title="如何实现深拷贝和浅拷贝"></a>如何实现深拷贝和浅拷贝</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span><span class="token literal-property property">浅拷贝</span><span class="token operator">:</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'UI'</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token string">'eat'</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> newObj    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token literal-property property">深拷贝</span><span class="token operator">:</span> <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">'前端'</span><span class="token punctuation">,</span>      <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>      <span class="token literal-property property">love</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token literal-property property">friuts</span> <span class="token operator">:</span> <span class="token string">'apple'</span><span class="token punctuation">,</span>      <span class="token literal-property property">meat</span><span class="token operator">:</span> <span class="token string">'beef'</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">getObj</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">var</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> k <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/* if (typeof obj[k] == 'object') &#123;          newObj[k] = getObj(obj[k])        &#125; else &#123;          newObj[k] = obj[k]        &#125; */</span>        newObj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> obj<span class="token punctuation">[</span>k<span class="token punctuation">]</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> newObj    <span class="token punctuation">&#125;</span>    <span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token function">getObj</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对闭包的理解？并能举出闭包的例子"><a href="#对闭包的理解？并能举出闭包的例子" class="headerlink" title="对闭包的理解？并能举出闭包的例子"></a>对闭包的理解？并能举出闭包的例子</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">闭包 <span class="token function">函数和声明该函数的词法环境的组合</span><span class="token punctuation">(</span>两个嵌套关系的函数<span class="token punctuation">,</span>内部函数可以访问外部函数定义的变量<span class="token punctuation">)</span>闭包的优点：<span class="token number">1</span>、形成私有空间，避免全局变量的污染           <span class="token number">2</span>、持久化内存，保存数据闭包的缺点：<span class="token number">1</span>、持久化内存，导致内存泄露解决：<span class="token number">1</span>、尽快避免函数的嵌套，以及变量的引用      <span class="token number">2</span>、执行完的变量，可以赋值<span class="token keyword">null</span>，让垃圾回收机制，进行回收释放内存      （当不在引用的变量，垃圾回收机制就会回收）<span class="token literal-property property">例</span><span class="token operator">:</span> 点击li获取当前下标    <span class="token operator">&lt;</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">111</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">222</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">333</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">444</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>      <span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token number">555</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token keyword">var</span> lis <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lis<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">j</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          lis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="什么是原型和原型链"><a href="#什么是原型和原型链" class="headerlink" title="什么是原型和原型链"></a>什么是原型和原型链</h2><pre class="line-numbers language-none"><code class="language-none">原型: 函数都有prototype属性,这个属性的值是个对象,称之为原型原型链: 对象都有__proto__属性,这个属性指向它的原型对象,原型对象也是对象,也有__proto__属性,指向原型对象的原型对象,这样一层一层形成的链式结构称为原型链.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="call、apply和bind的区别"><a href="#call、apply和bind的区别" class="headerlink" title="call、apply和bind的区别"></a>call、apply和bind的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1.</span> call和apply方法都可以调用函数<span class="token punctuation">,</span>方法内的第一个参数可以修改<span class="token keyword">this</span>的指向<span class="token number">2.</span> call方法可以有多个参数<span class="token punctuation">,</span>除了第一个参数<span class="token punctuation">,</span>其他参数作为实参传递给函数 apply方法最多有<span class="token number">2</span>个参数<span class="token punctuation">,</span>第二个参数是个数组或伪数组<span class="token punctuation">,</span>数组里面的每一项作为实参传递给函数<span class="token number">3.</span> bind方法不能调用函数<span class="token punctuation">,</span>它会创建一个副本函数<span class="token punctuation">,</span>并且绑定新函数的<span class="token keyword">this</span>指向bind返回的新的函数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="es6-es10新增常用方法"><a href="#es6-es10新增常用方法" class="headerlink" title="es6-es10新增常用方法"></a>es6-es10新增常用方法</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span> <span class="token literal-property property">es6</span><span class="token operator">:</span><span class="token number">1</span>、<span class="token keyword">let</span>、<span class="token keyword">const</span><span class="token number">2</span>、解构赋值   <span class="token keyword">let</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">,</span> b <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token number">3</span><span class="token function">、箭头函数</span>   <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">4</span>、字符串模板  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span><span class="token number">5</span>、扩展运算符  <span class="token operator">...</span>arr<span class="token number">6</span>、数组方法：map、filter、some等等<span class="token number">7</span>、类：<span class="token keyword">class</span>关键字<span class="token number">8</span>、promise 主要用于异步计算<span class="token number">9</span>、函数参数默认值 <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token number">10</span>、对象属性简写 <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span><span class="token number">11</span>、模块化：<span class="token keyword">import</span><span class="token operator">--</span>引入、exprot <span class="token keyword">default</span><span class="token operator">--</span>导出<span class="token literal-property property">es7</span><span class="token operator">:</span><span class="token number">1</span><span class="token function">、includes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回<span class="token boolean">true</span>，否则返回<span class="token boolean">false</span>。<span class="token literal-property property">es8</span><span class="token operator">:</span><span class="token number">1</span>、async<span class="token operator">/</span><span class="token keyword">await</span>es9：<span class="token number">1</span>、Promise<span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 允许你指定最终的逻辑<span class="token literal-property property">es10</span><span class="token operator">:</span><span class="token number">1</span><span class="token function">、数组Array的flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">和flatmap</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token literal-property property">flat</span><span class="token operator">:</span>方法最基本的作用就是数组降维      <span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// [1, 2, 3, 4]</span>        <span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>        <span class="token comment">//使用 Infinity 作为深度，展开任意深度的嵌套数组</span>        arr3<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">Infinity</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// [1, 2, 3, 4, 5, 6]</span>   <span class="token literal-property property">flatmap</span><span class="token operator">:</span><span class="token function">方法首先使用映射函数映射</span><span class="token punctuation">(</span>遍历<span class="token punctuation">)</span>每个元素，然后将结果压缩成一个新数组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="怎么理解函数的防抖和节流"><a href="#怎么理解函数的防抖和节流" class="headerlink" title="怎么理解函数的防抖和节流"></a>怎么理解函数的防抖和节流</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">答</span><span class="token operator">:</span><span class="token number">1</span>、定义：<span class="token literal-property property">防抖</span><span class="token operator">:</span> 就是指触发事件后在n秒内函数只能执行一次，如果在n秒内又触发了事件，则会重新计算函数执行时间。     例如：设定<span class="token number">1000</span>毫秒执行，当你触发事件了，他会<span class="token number">1000</span>毫秒后执行，     但是在还剩<span class="token number">500</span>毫秒的时候你又触发了事件，那就会重新开始<span class="token number">1000</span>毫秒之后再执行<span class="token literal-property property">节流</span><span class="token operator">:</span> 就是指连续触发事件但是在设定的一段时间内中只执行一次函数。     例如：设定<span class="token number">1000</span>毫秒执行，那你在<span class="token number">1000</span>毫秒触发在多次，也只在<span class="token number">1000</span>毫秒后执行一次     <span class="token number">2</span>、防抖和节流的实现：    <span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"ipt"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script<span class="token operator">></span>      <span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token keyword">null</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 防抖</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是防抖'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'.ipt'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onkeyup</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 节流</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timerId <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token keyword">return</span>        <span class="token punctuation">&#125;</span>        timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是节流'</span><span class="token punctuation">)</span>          timerId <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="异步函数有哪些"><a href="#异步函数有哪些" class="headerlink" title="异步函数有哪些"></a>异步函数有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">JavaScript 中常见的异步函数有：定时器，事件和 ajax 等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="伪数组有哪些"><a href="#伪数组有哪些" class="headerlink" title="伪数组有哪些"></a>伪数组有哪些</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、参数 arguments，<span class="token number">2</span>、<span class="token constant">DOM</span> 对象列表（比如通过 document<span class="token punctuation">.</span>getElementsByTags 得到的列表）、childNodes也是伪数组<span class="token number">3</span>、jQuery 对象（比如 <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span>）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="真数组和伪数组的区别"><a href="#真数组和伪数组的区别" class="headerlink" title="真数组和伪数组的区别"></a>真数组和伪数组的区别</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">伪数组：<span class="token number">1</span>、拥有length属性<span class="token number">2</span>、不具有数组的方法<span class="token number">3</span>、伪数组是一个Object，真数组是Array<span class="token number">4</span>、伪数组的长度不可变，真数组的长度是可变的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪数组怎么转真数组"><a href="#伪数组怎么转真数组" class="headerlink" title="伪数组怎么转真数组"></a>伪数组怎么转真数组</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、<span class="token keyword">let</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span>protype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>伪数组<span class="token punctuation">)</span><span class="token number">2</span>、<span class="token keyword">let</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>伪数组<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token constant">ES6</span>的新语法<span class="token number">3</span>、<span class="token keyword">let</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>伪数组<span class="token punctuation">]</span>，使用扩展运算符<span class="token punctuation">,</span>也是<span class="token constant">ES6</span>的语法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="数组如何进行降维（扁平化）"><a href="#数组如何进行降维（扁平化）" class="headerlink" title="数组如何进行降维（扁平化）"></a>数组如何进行降维（扁平化）</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span>、利用Array<span class="token punctuation">.</span>some方法判断数组中是否还存在数组，es6展开运算符连接数组       <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token number">2</span>、使用数组的concat方法　   <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>     result <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token number">3</span>、 使用数组的concat方法和扩展运算符    <span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token operator">...</span>arr<span class="token punctuation">)</span>        <span class="token number">4</span>、es6中的flat函数也可以实现数组的扁平化    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'中'</span><span class="token punctuation">,</span><span class="token string">'文'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span> <span class="token number">Infinity</span> <span class="token punctuation">)</span>    注意：flat方法的infinity属性，可以实现多层数组的降维<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="页面通信的方式有哪些"><a href="#页面通信的方式有哪些" class="headerlink" title="页面通信的方式有哪些"></a>页面通信的方式有哪些</h2><pre class="line-numbers language-none"><code class="language-none">1. 通过url拼接地址2. H5本地存储<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="如何清除浏览器的缓存"><a href="#如何清除浏览器的缓存" class="headerlink" title="如何清除浏览器的缓存"></a>如何清除浏览器的缓存</h2><pre class="line-numbers language-none"><code class="language-none">答: 当我们请求的地址相同的时候，浏览器为了提高性能，会把相同地址的数据进行缓存。如果服务端的数据发生改变，客户端也不会更新，那就需要清除缓存    解决：在url后面加时间戳    例如：https:&#x2F;&#x2F;www.baidu.com?time&#x3D;New Date()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="token的作用是什么"><a href="#token的作用是什么" class="headerlink" title="token的作用是什么"></a>token的作用是什么</h2><pre class="line-numbers language-none"><code class="language-none">答: token是服务端生成的“令牌”，来标识不同身份的    1. 防止表单重复提交    2.判断用户是否登录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="列举echarts常用的配置项，说明含义"><a href="#列举echarts常用的配置项，说明含义" class="headerlink" title="列举echarts常用的配置项，说明含义"></a>列举echarts常用的配置项，说明含义</h2><pre class="line-numbers language-none"><code class="language-none">答:     图表标题 title图例  legend值域 dataRange提示框 tooltip区域缩放控制器 dataZoom网格 grid类目轴 categoryAxis值型坐标轴默认参数 valueAxis柱形图默认参数 bar折线图默认参数 line散点图默认参数 scatter饼图默认参数 pie默认标志图形类型列表 symbolList可计算特性配置, 孤岛, 提示颜色 calculable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件</title>
      <link href="/wly/2022/01/14/ruan-jian/"/>
      <url>/wly/2022/01/14/ruan-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="Addin"><a href="#Addin" class="headerlink" title="Addin"></a>Addin</h2><h3 id="谷歌插件"><a href="#谷歌插件" class="headerlink" title="谷歌插件"></a>谷歌插件</h3><p><a href="https://chrome.zzzmh.cn/index#/index">https://chrome.zzzmh.cn/index#/index</a></p><h3 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h3><p>腾讯：<a href="https://pc.qq.com/">https://pc.qq.com/</a><br>SOS: <a href="https://www.rjsos.com/win">https://www.rjsos.com/win</a></p><h3 id="前端组件"><a href="#前端组件" class="headerlink" title="前端组件"></a>前端组件</h3><p>Axios: <a href="http://www.axios-js.com/">http://www.axios-js.com/</a><br>Bootstrap: <a href="https://www.bootcss.com/">https://www.bootcss.com/</a><br>Jquery: <a href="https://jquery.cuishifeng.cn/">https://jquery.cuishifeng.cn/</a><br>webpack: <a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a><br>Vant: <a href="https://youzan.github.io/vant/#/zh-CN/">https://youzan.github.io/vant/#/zh-CN/</a><br>w3school: <a href="https://www.w3school.com.cn/js/index.asp">https://www.w3school.com.cn/js/index.asp</a><br>Swiper: <a href="https://www.swiper.com.cn/usage/index.html">https://www.swiper.com.cn/usage/index.html</a><br>ECharts: <a href="https://echarts.apache.org/examples/zh/index.html">https://echarts.apache.org/examples/zh/index.html</a><br>Element: <a href="https://element.eleme.cn/#/zh-CN/component/installation">https://element.eleme.cn/#/zh-CN/component/installation</a><br>vue-element-admin: <a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/">https://panjiachen.gitee.io/vue-element-admin-site/zh/</a></p><h3 id="学习网站"><a href="#学习网站" class="headerlink" title="学习网站"></a>学习网站</h3><p>Gitee：<a href="https://gitee.com/">https://gitee.com/</a><br>Github：<a href="https://github.com/">https://github.com/</a><br>Csdn：<a href="https://www.csdn.net/">https://www.csdn.net/</a><br>掘金：<a href="https://juejin.cn/">https://juejin.cn/</a><br>知乎：<a href="https://www.zhihu.com/">https://www.zhihu.com/</a><br>简书：<a href="https://www.jianshu.com/sign_up">https://www.jianshu.com/sign_up</a><br>博客园：<a href="https://www.cnblogs.com/">https://www.cnblogs.com/</a></p><h3 id="提升网站"><a href="#提升网站" class="headerlink" title="提升网站"></a>提升网站</h3><p>力扣: <a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a><br>码市: <a href="https://www.codemart.com/projects">https://www.codemart.com/projects</a><br>站长之家: <a href="https://www.chinaz.com/">https://www.chinaz.com/</a><br>程序员客栈: <a href="https://www.proginn.com/search?keyword=vue">https://www.proginn.com/search?keyword=vue</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>图标: <a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a><br>Hexo: <a href="https://hexo.io/themes/">https://hexo.io/themes/</a><br>酷家乐: <a href="https://www.kujiale.com/">https://www.kujiale.com/</a><br>短网址: <a href="https://sina.lt/index.html">https://sina.lt/index.html</a><br>Valine: <a href="https://valine.js.org/quickstart.html">https://valine.js.org/quickstart.html</a><br>QQ 互联: <a href="https://connect.qq.com/devuser.html#/create/1/">https://connect.qq.com/devuser.html#/create/1/</a><br>语雀: <a href="https://www.yuque.com/wangliangyang/kb/oq0evh/edit">https://www.yuque.com/wangliangyang/kb/oq0evh/edit</a></p>]]></content>
      
      
      <categories>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入职基本配置</title>
      <link href="/wly/2022/01/09/ru-zhi-ji-ben-pei-zhi-1/"/>
      <url>/wly/2022/01/09/ru-zhi-ji-ben-pei-zhi-1/</url>
      
        <content type="html"><![CDATA[<h2 id="configuration"><a href="#configuration" class="headerlink" title="configuration"></a>configuration</h2><h3 id="首先下载相关软件"><a href="#首先下载相关软件" class="headerlink" title="首先下载相关软件"></a>首先下载相关软件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://pc.qq.com/?keyword<span class="token operator">=</span>%E8%B0%B7%E6%AD%8C<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="设置谷歌为默认浏览器，并配置相关扩展"><a href="#设置谷歌为默认浏览器，并配置相关扩展" class="headerlink" title="设置谷歌为默认浏览器，并配置相关扩展"></a>设置谷歌为默认浏览器，并配置相关扩展</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">https://chrome.zzzmh.cn/index<span class="token comment">#/index</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/wly/2022/01/09/ru-zhi-ji-ben-pei-zhi-1/2.jpg" class="lazyload placeholder" data-srcset="/wly/2022/01/09/ru-zhi-ji-ben-pei-zhi-1/2.jpg" srcset="https://pic1.zhimg.com/v2-cd38920285d125be80b3eb504052c550_b.webp" class><h3 id="配置-vscode-插件"><a href="#配置-vscode-插件" class="headerlink" title="配置 vscode 插件"></a>配置 vscode 插件</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Bracket Pair Colorizer<span class="token function">Chinese</span> <span class="token punctuation">(</span>Simplified<span class="token punctuation">)</span> <span class="token punctuation">(</span>简体中文<span class="token punctuation">)</span>Color HighlightESLint<span class="token literal-property property">formate</span><span class="token operator">:</span> <span class="token constant">CSS</span><span class="token operator">/</span><span class="token constant">LESS</span><span class="token operator">/</span><span class="token constant">SCSS</span> formatterGit HistoryGitLens — Git superchargedImage previewjavascript console utilsopen <span class="token keyword">in</span> browserPath IntellisensePower ModePrettier <span class="token operator">-</span> Code formatterVetur<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json :"></a>settings.json :</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">&#123;</span>  // vscode默认启用了根据文件类型自动设置tabsize的选项  <span class="token string">"editor.detectIndentation"</span><span class="token builtin class-name">:</span> false,  // 重新设定tabsize  <span class="token string">"editor.tabSize"</span><span class="token builtin class-name">:</span> <span class="token number">2</span>,  <span class="token string">"editor.wordWrap"</span><span class="token builtin class-name">:</span> <span class="token string">"on"</span>, //超出页面自动换行  <span class="token string">"editor.formatOnSave"</span><span class="token builtin class-name">:</span> true,  <span class="token string">"editor.codeActionsOnSave"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"source.fixAll"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"eslint.validate"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"javascript"</span>, <span class="token string">"javascriptreact"</span>, <span class="token string">"vue"</span><span class="token punctuation">]</span>,  <span class="token string">"[javascript]"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"editor.defaultFormatter"</span><span class="token builtin class-name">:</span> <span class="token string">"vscode.typescript-language-features"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"[vue]"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"editor.defaultFormatter"</span><span class="token builtin class-name">:</span> <span class="token string">"octref.vetur"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"[jsonc]"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"editor.defaultFormatter"</span><span class="token builtin class-name">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"[html]"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"editor.defaultFormatter"</span><span class="token builtin class-name">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span>,  <span class="token string">"[css]"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"editor.defaultFormatter"</span><span class="token builtin class-name">:</span> <span class="token string">"esbenp.prettier-vscode"</span>  <span class="token punctuation">&#125;</span>,  // 默认使用prettier格式化支持的文件  <span class="token string">"vetur.format.defaultFormatter.js"</span><span class="token builtin class-name">:</span> <span class="token string">"vscode-typescript"</span>,  <span class="token string">"vetur.format.defaultFormatter.html"</span><span class="token builtin class-name">:</span> <span class="token string">"js-beautify-html"</span>,  <span class="token string">"vetur.format.defaultFormatterOptions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"prettier"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      // 结尾无分号      <span class="token string">"semi"</span><span class="token builtin class-name">:</span> false,      // 超过140个字符换行      <span class="token string">"printWidth"</span><span class="token builtin class-name">:</span> <span class="token number">140</span>,      // 使用单引号      <span class="token string">"singleQuote"</span><span class="token builtin class-name">:</span> true,      // 无尾随逗号      <span class="token string">"trailingComma"</span><span class="token builtin class-name">:</span> <span class="token string">"none"</span>,      // 箭头函数单个参数不加分号      <span class="token string">"arrowParens"</span><span class="token builtin class-name">:</span> <span class="token string">"avoid"</span>    <span class="token punctuation">&#125;</span>,    <span class="token string">"prettyhtml"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"printWidth"</span><span class="token builtin class-name">:</span> <span class="token number">140</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>,  // 同上prettier格式化代码  <span class="token string">"prettier.semi"</span><span class="token builtin class-name">:</span> false,  <span class="token string">"prettier.printWidth"</span><span class="token builtin class-name">:</span> <span class="token number">140</span>,  <span class="token string">"prettier.trailingComma"</span><span class="token builtin class-name">:</span> <span class="token string">"none"</span>,  <span class="token string">"prettier.singleQuote"</span><span class="token builtin class-name">:</span> true,  <span class="token string">"prettier.arrowParens"</span><span class="token builtin class-name">:</span> <span class="token string">"avoid"</span>,  <span class="token string">"files.associations"</span><span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"*.cjson"</span><span class="token builtin class-name">:</span> <span class="token string">"jsonc"</span>,    <span class="token string">"*.wxss"</span><span class="token builtin class-name">:</span> <span class="token string">"css"</span>,    <span class="token string">"*.wxs"</span><span class="token builtin class-name">:</span> <span class="token string">"javascript"</span>  <span class="token punctuation">&#125;</span>,  // 打字特效  <span class="token string">"powermode.enabled"</span><span class="token builtin class-name">:</span> true, // 开启特效  <span class="token string">"powermode.shake.intensity"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>, //解决防抖  // 去除右上角图标  <span class="token string">"powermode.combo.counterEnabled"</span><span class="token builtin class-name">:</span> <span class="token string">"hide"</span>,  <span class="token string">"powermode.combo.timerEnabled"</span><span class="token builtin class-name">:</span> <span class="token string">"hide"</span>,  <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"flames"</span>, // 火焰  <span class="token string">"powermode.combo.location"</span><span class="token builtin class-name">:</span> <span class="token string">"off"</span>,  <span class="token string">"explorer.confirmDelete"</span><span class="token builtin class-name">:</span> false,  <span class="token string">"git.enableSmartCommit"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span>  // <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"fireworks"</span> // 烟花  // <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"magic"</span> // 魔法  // <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"clippy"</span> // 回形针  // <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"simple-rift"</span> // 粒子  // <span class="token string">"powermode.presets"</span><span class="token builtin class-name">:</span> <span class="token string">"exploding-rift"</span> // 粒子<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/wly/2021/02/07/hello-world/"/>
      <url>/wly/2021/02/07/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
